
RF_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003e58  08003e58  00013e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ec0  08003ec0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ec0  08003ec0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ec0  08003ec0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ec0  08003ec0  00013ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ec4  08003ec4  00013ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000007c  08003f44  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08003f44  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f161  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000246a  00000000  00000000  0002f206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  00031670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e10  00000000  00000000  00032578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188ea  00000000  00000000  00033388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106a6  00000000  00000000  0004bc72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cc44  00000000  00000000  0005c318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8f5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041e8  00000000  00000000  000e8fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e40 	.word	0x08003e40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08003e40 	.word	0x08003e40

0800014c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08a      	sub	sp, #40	; 0x28
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0314 	add.w	r3, r7, #20
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b5a      	ldr	r3, [pc, #360]	; (80002cc <MX_GPIO_Init+0x180>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a59      	ldr	r2, [pc, #356]	; (80002cc <MX_GPIO_Init+0x180>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b57      	ldr	r3, [pc, #348]	; (80002cc <MX_GPIO_Init+0x180>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	613b      	str	r3, [r7, #16]
 8000176:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b54      	ldr	r3, [pc, #336]	; (80002cc <MX_GPIO_Init+0x180>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a53      	ldr	r2, [pc, #332]	; (80002cc <MX_GPIO_Init+0x180>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b51      	ldr	r3, [pc, #324]	; (80002cc <MX_GPIO_Init+0x180>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60fb      	str	r3, [r7, #12]
 800018e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b4e      	ldr	r3, [pc, #312]	; (80002cc <MX_GPIO_Init+0x180>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a4d      	ldr	r2, [pc, #308]	; (80002cc <MX_GPIO_Init+0x180>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b4b      	ldr	r3, [pc, #300]	; (80002cc <MX_GPIO_Init+0x180>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	60bb      	str	r3, [r7, #8]
 80001a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b48      	ldr	r3, [pc, #288]	; (80002cc <MX_GPIO_Init+0x180>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a47      	ldr	r2, [pc, #284]	; (80002cc <MX_GPIO_Init+0x180>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b45      	ldr	r3, [pc, #276]	; (80002cc <MX_GPIO_Init+0x180>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	607b      	str	r3, [r7, #4]
 80001be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80001c0:	2201      	movs	r2, #1
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	4842      	ldr	r0, [pc, #264]	; (80002d0 <MX_GPIO_Init+0x184>)
 80001c8:	f001 fa32 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001d2:	4840      	ldr	r0, [pc, #256]	; (80002d4 <MX_GPIO_Init+0x188>)
 80001d4:	f001 fa2c 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80001d8:	2201      	movs	r2, #1
 80001da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001de:	483d      	ldr	r0, [pc, #244]	; (80002d4 <MX_GPIO_Init+0x188>)
 80001e0:	f001 fa26 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80001e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ea:	2301      	movs	r3, #1
 80001ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ee:	2300      	movs	r3, #0
 80001f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f2:	2302      	movs	r3, #2
 80001f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80001f6:	f107 0314 	add.w	r3, r7, #20
 80001fa:	4619      	mov	r1, r3
 80001fc:	4834      	ldr	r0, [pc, #208]	; (80002d0 <MX_GPIO_Init+0x184>)
 80001fe:	f001 f893 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000202:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000208:	2303      	movs	r3, #3
 800020a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800020c:	f107 0314 	add.w	r3, r7, #20
 8000210:	4619      	mov	r1, r3
 8000212:	482f      	ldr	r0, [pc, #188]	; (80002d0 <MX_GPIO_Init+0x184>)
 8000214:	f001 f888 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000218:	2303      	movs	r3, #3
 800021a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000220:	f107 0314 	add.w	r3, r7, #20
 8000224:	4619      	mov	r1, r3
 8000226:	482c      	ldr	r0, [pc, #176]	; (80002d8 <MX_GPIO_Init+0x18c>)
 8000228:	f001 f87e 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA3 PA4
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 800022c:	f649 031b 	movw	r3, #38939	; 0x981b
 8000230:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000232:	2303      	movs	r3, #3
 8000234:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000236:	f107 0314 	add.w	r3, r7, #20
 800023a:	4619      	mov	r1, r3
 800023c:	4827      	ldr	r0, [pc, #156]	; (80002dc <MX_GPIO_Init+0x190>)
 800023e:	f001 f873 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000242:	2304      	movs	r3, #4
 8000244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000246:	2300      	movs	r3, #0
 8000248:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800024a:	2301      	movs	r3, #1
 800024c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800024e:	f107 0314 	add.w	r3, r7, #20
 8000252:	4619      	mov	r1, r3
 8000254:	4821      	ldr	r0, [pc, #132]	; (80002dc <MX_GPIO_Init+0x190>)
 8000256:	f001 f867 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB14 PB15 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800025a:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800025e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000260:	2303      	movs	r3, #3
 8000262:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000264:	f107 0314 	add.w	r3, r7, #20
 8000268:	4619      	mov	r1, r3
 800026a:	481a      	ldr	r0, [pc, #104]	; (80002d4 <MX_GPIO_Init+0x188>)
 800026c:	f001 f85c 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CE_Pin|SPI1_CS_Pin;
 8000270:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000276:	2301      	movs	r3, #1
 8000278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027a:	2300      	movs	r3, #0
 800027c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800027e:	2303      	movs	r3, #3
 8000280:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000282:	f107 0314 	add.w	r3, r7, #20
 8000286:	4619      	mov	r1, r3
 8000288:	4812      	ldr	r0, [pc, #72]	; (80002d4 <MX_GPIO_Init+0x188>)
 800028a:	f001 f84d 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 800028e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <MX_GPIO_Init+0x194>)
 8000296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000298:	2301      	movs	r3, #1
 800029a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 800029c:	f107 0314 	add.w	r3, r7, #20
 80002a0:	4619      	mov	r1, r3
 80002a2:	480e      	ldr	r0, [pc, #56]	; (80002dc <MX_GPIO_Init+0x190>)
 80002a4:	f001 f840 	bl	8001328 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 80002a8:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <MX_GPIO_Init+0x198>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	627b      	str	r3, [r7, #36]	; 0x24
 80002ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002b0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80002b4:	627b      	str	r3, [r7, #36]	; 0x24
 80002b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002bc:	627b      	str	r3, [r7, #36]	; 0x24
 80002be:	4a09      	ldr	r2, [pc, #36]	; (80002e4 <MX_GPIO_Init+0x198>)
 80002c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002c2:	6053      	str	r3, [r2, #4]

}
 80002c4:	bf00      	nop
 80002c6:	3728      	adds	r7, #40	; 0x28
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40021000 	.word	0x40021000
 80002d0:	40011000 	.word	0x40011000
 80002d4:	40010c00 	.word	0x40010c00
 80002d8:	40011400 	.word	0x40011400
 80002dc:	40010800 	.word	0x40010800
 80002e0:	10210000 	.word	0x10210000
 80002e4:	40010000 	.word	0x40010000

080002e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ee:	f000 fe87 	bl	8001000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f2:	f000 f86f 	bl	80003d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f6:	f7ff ff29 	bl	800014c <MX_GPIO_Init>
  MX_SPI1_Init();
 80002fa:	f000 fc0f 	bl	8000b1c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80002fe:	f000 fde3 	bl	8000ec8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000302:	f000 fd51 	bl	8000da8 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000306:	f000 f8a6 	bl	8000456 <MX_NVIC_Init>
#if TX_Process
  nrf24l01p_tx_init(2500, _1Mbps);
  TRIE = 0;

#else
  nrf24l01p_rx_init(2500, _1Mbps);
 800030a:	2100      	movs	r1, #0
 800030c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000310:	f000 f966 	bl	80005e0 <nrf24l01p_rx_init>
  TRIE = 1;
 8000314:	4b29      	ldr	r3, [pc, #164]	; (80003bc <main+0xd4>)
 8000316:	2201      	movs	r2, #1
 8000318:	701a      	strb	r2, [r3, #0]
       break;
	}
}
#else
 ///////// RECIEVER CODE
  retry = 100;
 800031a:	4b29      	ldr	r3, [pc, #164]	; (80003c0 <main+0xd8>)
 800031c:	2264      	movs	r2, #100	; 0x64
 800031e:	701a      	strb	r2, [r3, #0]
  while(retry -- )
 8000320:	e042      	b.n	80003a8 <main+0xc0>
  {
	  if((rx_data[0] == '#') && (rx_data[1] == 'N') && (rx_data[2] == '1'))
 8000322:	4b28      	ldr	r3, [pc, #160]	; (80003c4 <main+0xdc>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b23      	cmp	r3, #35	; 0x23
 8000328:	d13e      	bne.n	80003a8 <main+0xc0>
 800032a:	4b26      	ldr	r3, [pc, #152]	; (80003c4 <main+0xdc>)
 800032c:	785b      	ldrb	r3, [r3, #1]
 800032e:	2b4e      	cmp	r3, #78	; 0x4e
 8000330:	d13a      	bne.n	80003a8 <main+0xc0>
 8000332:	4b24      	ldr	r3, [pc, #144]	; (80003c4 <main+0xdc>)
 8000334:	789b      	ldrb	r3, [r3, #2]
 8000336:	2b31      	cmp	r3, #49	; 0x31
 8000338:	d136      	bne.n	80003a8 <main+0xc0>
	  {
		  sprintf((char *)buf,"%c%c%c",rx_data[0],rx_data[1],rx_data[2]);
 800033a:	4b22      	ldr	r3, [pc, #136]	; (80003c4 <main+0xdc>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	461a      	mov	r2, r3
 8000340:	4b20      	ldr	r3, [pc, #128]	; (80003c4 <main+0xdc>)
 8000342:	785b      	ldrb	r3, [r3, #1]
 8000344:	4619      	mov	r1, r3
 8000346:	4b1f      	ldr	r3, [pc, #124]	; (80003c4 <main+0xdc>)
 8000348:	789b      	ldrb	r3, [r3, #2]
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	460b      	mov	r3, r1
 800034e:	491e      	ldr	r1, [pc, #120]	; (80003c8 <main+0xe0>)
 8000350:	481e      	ldr	r0, [pc, #120]	; (80003cc <main+0xe4>)
 8000352:	f003 f8fb 	bl	800354c <siprintf>
		  HAL_UART_Transmit(&huart1, buf, 4, 100);
 8000356:	2364      	movs	r3, #100	; 0x64
 8000358:	2204      	movs	r2, #4
 800035a:	491c      	ldr	r1, [pc, #112]	; (80003cc <main+0xe4>)
 800035c:	481c      	ldr	r0, [pc, #112]	; (80003d0 <main+0xe8>)
 800035e:	f002 ff43 	bl	80031e8 <HAL_UART_Transmit>
		 // nrf24l01p_tx_init(2500, _1Mbps);
		  buf[0] = 'O';
 8000362:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <main+0xe4>)
 8000364:	224f      	movs	r2, #79	; 0x4f
 8000366:	701a      	strb	r2, [r3, #0]
		  buf[1] = 'K';
 8000368:	4b18      	ldr	r3, [pc, #96]	; (80003cc <main+0xe4>)
 800036a:	224b      	movs	r2, #75	; 0x4b
 800036c:	705a      	strb	r2, [r3, #1]
		  buf[2] = '\n';
 800036e:	4b17      	ldr	r3, [pc, #92]	; (80003cc <main+0xe4>)
 8000370:	220a      	movs	r2, #10
 8000372:	709a      	strb	r2, [r3, #2]
		  nrf24l01p_tx_transmit(buf);
 8000374:	4815      	ldr	r0, [pc, #84]	; (80003cc <main+0xe4>)
 8000376:	f000 f975 	bl	8000664 <nrf24l01p_tx_transmit>
		  HAL_Delay(100);
 800037a:	2064      	movs	r0, #100	; 0x64
 800037c:	f000 fea2 	bl	80010c4 <HAL_Delay>
		  rx_data[0]  =  rx_data[1]  =  rx_data[2] = '\0';
 8000380:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <main+0xdc>)
 8000382:	2200      	movs	r2, #0
 8000384:	709a      	strb	r2, [r3, #2]
 8000386:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <main+0xdc>)
 8000388:	789a      	ldrb	r2, [r3, #2]
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <main+0xdc>)
 800038c:	705a      	strb	r2, [r3, #1]
 800038e:	4b0d      	ldr	r3, [pc, #52]	; (80003c4 <main+0xdc>)
 8000390:	785a      	ldrb	r2, [r3, #1]
 8000392:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <main+0xdc>)
 8000394:	701a      	strb	r2, [r3, #0]
		  nrf24l01p_rx_init(2500, _1Mbps);
 8000396:	2100      	movs	r1, #0
 8000398:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800039c:	f000 f920 	bl	80005e0 <nrf24l01p_rx_init>
		  HAL_Delay(10);
 80003a0:	200a      	movs	r0, #10
 80003a2:	f000 fe8f 	bl	80010c4 <HAL_Delay>
		  break;
 80003a6:	e007      	b.n	80003b8 <main+0xd0>
  while(retry -- )
 80003a8:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <main+0xd8>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	1e5a      	subs	r2, r3, #1
 80003ae:	b2d1      	uxtb	r1, r2
 80003b0:	4a03      	ldr	r2, [pc, #12]	; (80003c0 <main+0xd8>)
 80003b2:	7011      	strb	r1, [r2, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d1b4      	bne.n	8000322 <main+0x3a>
  retry = 100;
 80003b8:	e7af      	b.n	800031a <main+0x32>
 80003ba:	bf00      	nop
 80003bc:	200000a1 	.word	0x200000a1
 80003c0:	200000a0 	.word	0x200000a0
 80003c4:	20000098 	.word	0x20000098
 80003c8:	08003e58 	.word	0x08003e58
 80003cc:	20000000 	.word	0x20000000
 80003d0:	20000148 	.word	0x20000148

080003d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b090      	sub	sp, #64	; 0x40
 80003d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003da:	f107 0318 	add.w	r3, r7, #24
 80003de:	2228      	movs	r2, #40	; 0x28
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f003 f8aa 	bl	800353c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
 80003f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003f6:	2302      	movs	r3, #2
 80003f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003fa:	2301      	movs	r3, #1
 80003fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003fe:	2310      	movs	r3, #16
 8000400:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000402:	2302      	movs	r3, #2
 8000404:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000406:	2300      	movs	r3, #0
 8000408:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800040a:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 800040e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000410:	f107 0318 	add.w	r3, r7, #24
 8000414:	4618      	mov	r0, r3
 8000416:	f001 f955 	bl	80016c4 <HAL_RCC_OscConfig>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000420:	f000 f854 	bl	80004cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000424:	230f      	movs	r3, #15
 8000426:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000428:	2302      	movs	r3, #2
 800042a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800042c:	2300      	movs	r3, #0
 800042e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000430:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000434:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000436:	2300      	movs	r3, #0
 8000438:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	2101      	movs	r1, #1
 800043e:	4618      	mov	r0, r3
 8000440:	f001 fbc2 	bl	8001bc8 <HAL_RCC_ClockConfig>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800044a:	f000 f83f 	bl	80004cc <Error_Handler>
  }
}
 800044e:	bf00      	nop
 8000450:	3740      	adds	r7, #64	; 0x40
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800045a:	2200      	movs	r2, #0
 800045c:	2100      	movs	r1, #0
 800045e:	2017      	movs	r0, #23
 8000460:	f000 ff2b 	bl	80012ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000464:	2017      	movs	r0, #23
 8000466:	f000 ff44 	bl	80012f2 <HAL_NVIC_EnableIRQ>
}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}

0800046e <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800046e:	b480      	push	{r7}
 8000470:	b083      	sub	sp, #12
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
//     }
//#endif

//  }

}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr

08000480 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	4603      	mov	r3, r0
 8000488:	80fb      	strh	r3, [r7, #6]

   if(TRIE == 0)
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <HAL_GPIO_EXTI_Callback+0x44>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d105      	bne.n	800049e <HAL_GPIO_EXTI_Callback+0x1e>
   {
	  if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
 8000492:	88fb      	ldrh	r3, [r7, #6]
 8000494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000498:	d101      	bne.n	800049e <HAL_GPIO_EXTI_Callback+0x1e>
	  {
		         nrf24l01p_tx_irq();//clear interrupt flag
 800049a:	f000 f8ef 	bl	800067c <nrf24l01p_tx_irq>
		         //nrf24l01p_rx_receive(rx_data); // read data when data ready flag is set

	  }
   }
   if(TRIE == 1)
 800049e:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <HAL_GPIO_EXTI_Callback+0x44>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2b01      	cmp	r3, #1
 80004a4:	d109      	bne.n	80004ba <HAL_GPIO_EXTI_Callback+0x3a>
   {
	  if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
 80004a6:	88fb      	ldrh	r3, [r7, #6]
 80004a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004ac:	d105      	bne.n	80004ba <HAL_GPIO_EXTI_Callback+0x3a>
	  {
	 		nrf24l01p_rx_receive(rx_data); // read data when data ready flag is set
 80004ae:	4806      	ldr	r0, [pc, #24]	; (80004c8 <HAL_GPIO_EXTI_Callback+0x48>)
 80004b0:	f000 f8c4 	bl	800063c <nrf24l01p_rx_receive>
            TRIE = 1;
 80004b4:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <HAL_GPIO_EXTI_Callback+0x44>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	701a      	strb	r2, [r3, #0]
	  }
   }
}
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	200000a1 	.word	0x200000a1
 80004c8:	20000098 	.word	0x20000098

080004cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d0:	b672      	cpsid	i
}
 80004d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <Error_Handler+0x8>
	...

080004d8 <cs_high>:

#include "nRF24L01.h"


static void cs_high()
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 80004dc:	2201      	movs	r2, #1
 80004de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e2:	4802      	ldr	r0, [pc, #8]	; (80004ec <cs_high+0x14>)
 80004e4:	f001 f8a4 	bl	8001630 <HAL_GPIO_WritePin>
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40010c00 	.word	0x40010c00

080004f0 <cs_low>:

static void cs_low()
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fa:	4802      	ldr	r0, [pc, #8]	; (8000504 <cs_low+0x14>)
 80004fc:	f001 f898 	bl	8001630 <HAL_GPIO_WritePin>
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40010c00 	.word	0x40010c00

08000508 <ce_high>:

static void ce_high()
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 800050c:	2201      	movs	r2, #1
 800050e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000512:	4802      	ldr	r0, [pc, #8]	; (800051c <ce_high+0x14>)
 8000514:	f001 f88c 	bl	8001630 <HAL_GPIO_WritePin>
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40010c00 	.word	0x40010c00

08000520 <ce_low>:

static void ce_low()
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052a:	4802      	ldr	r0, [pc, #8]	; (8000534 <ce_low+0x14>)
 800052c:	f001 f880 	bl	8001630 <HAL_GPIO_WritePin>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40010c00 	.word	0x40010c00

08000538 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af02      	add	r7, sp, #8
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 8000546:	f7ff ffd3 	bl	80004f0 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800054a:	f107 020e 	add.w	r2, r7, #14
 800054e:	f107 010f 	add.w	r1, r7, #15
 8000552:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2301      	movs	r3, #1
 800055a:	4809      	ldr	r0, [pc, #36]	; (8000580 <read_register+0x48>)
 800055c:	f001 ffa1 	bl	80024a2 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 8000560:	f107 010d 	add.w	r1, r7, #13
 8000564:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000568:	2201      	movs	r2, #1
 800056a:	4805      	ldr	r0, [pc, #20]	; (8000580 <read_register+0x48>)
 800056c:	f001 fe81 	bl	8002272 <HAL_SPI_Receive>
    cs_high();
 8000570:	f7ff ffb2 	bl	80004d8 <cs_high>

    return read_val;
 8000574:	7b7b      	ldrb	r3, [r7, #13]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	200000a4 	.word	0x200000a4

08000584 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af02      	add	r7, sp, #8
 800058a:	4603      	mov	r3, r0
 800058c:	460a      	mov	r2, r1
 800058e:	71fb      	strb	r3, [r7, #7]
 8000590:	4613      	mov	r3, r2
 8000592:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	f043 0320 	orr.w	r3, r3, #32
 800059a:	b2db      	uxtb	r3, r3
 800059c:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 800059e:	79bb      	ldrb	r3, [r7, #6]
 80005a0:	737b      	strb	r3, [r7, #13]

    cs_low();
 80005a2:	f7ff ffa5 	bl	80004f0 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80005a6:	f107 020e 	add.w	r2, r7, #14
 80005aa:	f107 010f 	add.w	r1, r7, #15
 80005ae:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2301      	movs	r3, #1
 80005b6:	4809      	ldr	r0, [pc, #36]	; (80005dc <write_register+0x58>)
 80005b8:	f001 ff73 	bl	80024a2 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 80005bc:	f107 010d 	add.w	r1, r7, #13
 80005c0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80005c4:	2201      	movs	r2, #1
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <write_register+0x58>)
 80005c8:	f001 fd10 	bl	8001fec <HAL_SPI_Transmit>
    cs_high();
 80005cc:	f7ff ff84 	bl	80004d8 <cs_high>

    return write_val;
 80005d0:	7b7b      	ldrb	r3, [r7, #13]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200000a4 	.word	0x200000a4

080005e0 <nrf24l01p_rx_init>:


/* nRF24L01+ Main Functions */
void nrf24l01p_rx_init(channel MHz, air_data_rate bps)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	460a      	mov	r2, r1
 80005ea:	80fb      	strh	r3, [r7, #6]
 80005ec:	4613      	mov	r3, r2
 80005ee:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 80005f0:	f000 f868 	bl	80006c4 <nrf24l01p_reset>

    nrf24l01p_prx_mode();
 80005f4:	f000 f8ba 	bl	800076c <nrf24l01p_prx_mode>
    nrf24l01p_power_up();
 80005f8:	f000 f9aa 	bl	8000950 <nrf24l01p_power_up>

    nrf24l01p_rx_set_payload_widths(NRF24L01P_PAYLOAD_LENGTH);
 80005fc:	2008      	movs	r0, #8
 80005fe:	f000 f95d 	bl	80008bc <nrf24l01p_rx_set_payload_widths>

    nrf24l01p_set_rf_channel(MHz);
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fa2f 	bl	8000a68 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 800060a:	797b      	ldrb	r3, [r7, #5]
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fa5b 	bl	8000ac8 <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8000612:	2003      	movs	r0, #3
 8000614:	f000 fa3b 	bl	8000a8e <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8000618:	2001      	movs	r0, #1
 800061a:	f000 f9ae 	bl	800097a <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 800061e:	2005      	movs	r0, #5
 8000620:	f000 f9ce 	bl	80009c0 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f9db 	bl	80009e0 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 800062a:	20fa      	movs	r0, #250	; 0xfa
 800062c:	f000 f9f4 	bl	8000a18 <nrf24l01p_auto_retransmit_delay>

    ce_high();
 8000630:	f7ff ff6a 	bl	8000508 <ce_high>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <nrf24l01p_rx_receive>:

    ce_high();
}

void nrf24l01p_rx_receive(uint8_t* rx_payload)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
    nrf24l01p_read_rx_fifo(rx_payload);
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f000 f8a7 	bl	8000798 <nrf24l01p_read_rx_fifo>
    nrf24l01p_clear_rx_dr();
 800064a:	f000 f945 	bl	80008d8 <nrf24l01p_clear_rx_dr>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800064e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000652:	4803      	ldr	r0, [pc, #12]	; (8000660 <nrf24l01p_rx_receive+0x24>)
 8000654:	f001 f804 	bl	8001660 <HAL_GPIO_TogglePin>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40011000 	.word	0x40011000

08000664 <nrf24l01p_tx_transmit>:

void nrf24l01p_tx_transmit(uint8_t* tx_payload)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
    nrf24l01p_write_tx_fifo(tx_payload);
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f000 f8b7 	bl	80007e0 <nrf24l01p_write_tx_fifo>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <nrf24l01p_tx_irq>:

void nrf24l01p_tx_irq()
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
    uint8_t tx_ds = nrf24l01p_get_status();
 8000682:	f000 f901 	bl	8000888 <nrf24l01p_get_status>
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
    tx_ds &= 0x20;
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	f003 0320 	and.w	r3, r3, #32
 8000690:	71fb      	strb	r3, [r7, #7]

    if(tx_ds)
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d007      	beq.n	80006a8 <nrf24l01p_tx_irq+0x2c>
    {
        // TX_DS
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069c:	4808      	ldr	r0, [pc, #32]	; (80006c0 <nrf24l01p_tx_irq+0x44>)
 800069e:	f000 ffdf 	bl	8001660 <HAL_GPIO_TogglePin>
        nrf24l01p_clear_tx_ds();
 80006a2:	f000 f92d 	bl	8000900 <nrf24l01p_clear_tx_ds>
    {
        // MAX_RT
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
        nrf24l01p_clear_max_rt();
    }
}
 80006a6:	e007      	b.n	80006b8 <nrf24l01p_tx_irq+0x3c>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ae:	4804      	ldr	r0, [pc, #16]	; (80006c0 <nrf24l01p_tx_irq+0x44>)
 80006b0:	f000 ffbe 	bl	8001630 <HAL_GPIO_WritePin>
        nrf24l01p_clear_max_rt();
 80006b4:	f000 f938 	bl	8000928 <nrf24l01p_clear_max_rt>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40011000 	.word	0x40011000

080006c4 <nrf24l01p_reset>:

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 80006c8:	f7ff ff06 	bl	80004d8 <cs_high>
    ce_low();
 80006cc:	f7ff ff28 	bl	8000520 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 80006d0:	2108      	movs	r1, #8
 80006d2:	2000      	movs	r0, #0
 80006d4:	f7ff ff56 	bl	8000584 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 80006d8:	213f      	movs	r1, #63	; 0x3f
 80006da:	2001      	movs	r0, #1
 80006dc:	f7ff ff52 	bl	8000584 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 80006e0:	2103      	movs	r1, #3
 80006e2:	2002      	movs	r0, #2
 80006e4:	f7ff ff4e 	bl	8000584 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 80006e8:	2103      	movs	r1, #3
 80006ea:	2003      	movs	r0, #3
 80006ec:	f7ff ff4a 	bl	8000584 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 80006f0:	2103      	movs	r1, #3
 80006f2:	2004      	movs	r0, #4
 80006f4:	f7ff ff46 	bl	8000584 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 80006f8:	2102      	movs	r1, #2
 80006fa:	2005      	movs	r0, #5
 80006fc:	f7ff ff42 	bl	8000584 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8000700:	2107      	movs	r1, #7
 8000702:	2006      	movs	r0, #6
 8000704:	f7ff ff3e 	bl	8000584 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 8000708:	217e      	movs	r1, #126	; 0x7e
 800070a:	2007      	movs	r0, #7
 800070c:	f7ff ff3a 	bl	8000584 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8000710:	2100      	movs	r1, #0
 8000712:	2011      	movs	r0, #17
 8000714:	f7ff ff36 	bl	8000584 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8000718:	2100      	movs	r1, #0
 800071a:	2011      	movs	r0, #17
 800071c:	f7ff ff32 	bl	8000584 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8000720:	2100      	movs	r1, #0
 8000722:	2012      	movs	r0, #18
 8000724:	f7ff ff2e 	bl	8000584 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8000728:	2100      	movs	r1, #0
 800072a:	2013      	movs	r0, #19
 800072c:	f7ff ff2a 	bl	8000584 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8000730:	2100      	movs	r1, #0
 8000732:	2014      	movs	r0, #20
 8000734:	f7ff ff26 	bl	8000584 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8000738:	2100      	movs	r1, #0
 800073a:	2015      	movs	r0, #21
 800073c:	f7ff ff22 	bl	8000584 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8000740:	2100      	movs	r1, #0
 8000742:	2016      	movs	r0, #22
 8000744:	f7ff ff1e 	bl	8000584 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8000748:	2111      	movs	r1, #17
 800074a:	2017      	movs	r0, #23
 800074c:	f7ff ff1a 	bl	8000584 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8000750:	2100      	movs	r1, #0
 8000752:	201c      	movs	r0, #28
 8000754:	f7ff ff16 	bl	8000584 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 8000758:	2100      	movs	r1, #0
 800075a:	201d      	movs	r0, #29
 800075c:	f7ff ff12 	bl	8000584 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 8000760:	f000 f862 	bl	8000828 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 8000764:	f000 f878 	bl	8000858 <nrf24l01p_flush_tx_fifo>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <nrf24l01p_prx_mode>:

void nrf24l01p_prx_mode()
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000772:	2000      	movs	r0, #0
 8000774:	f7ff fee0 	bl	8000538 <read_register>
 8000778:	4603      	mov	r3, r0
 800077a:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 0;
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	f043 0301 	orr.w	r3, r3, #1
 8000782:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	4619      	mov	r1, r3
 8000788:	2000      	movs	r0, #0
 800078a:	f7ff fefb 	bl	8000584 <write_register>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <nrf24l01p_read_rx_fifo>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

uint8_t nrf24l01p_read_rx_fifo(uint8_t* rx_payload)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af02      	add	r7, sp, #8
 800079e:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 80007a0:	2361      	movs	r3, #97	; 0x61
 80007a2:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 80007a4:	f7ff fea4 	bl	80004f0 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80007a8:	f107 020e 	add.w	r2, r7, #14
 80007ac:	f107 010f 	add.w	r1, r7, #15
 80007b0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2301      	movs	r3, #1
 80007b8:	4808      	ldr	r0, [pc, #32]	; (80007dc <nrf24l01p_read_rx_fifo+0x44>)
 80007ba:	f001 fe72 	bl	80024a2 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, rx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 80007be:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007c2:	2208      	movs	r2, #8
 80007c4:	6879      	ldr	r1, [r7, #4]
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <nrf24l01p_read_rx_fifo+0x44>)
 80007c8:	f001 fd53 	bl	8002272 <HAL_SPI_Receive>
    cs_high();
 80007cc:	f7ff fe84 	bl	80004d8 <cs_high>

    return status;
 80007d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000a4 	.word	0x200000a4

080007e0 <nrf24l01p_write_tx_fifo>:

uint8_t nrf24l01p_write_tx_fifo(uint8_t* tx_payload)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af02      	add	r7, sp, #8
 80007e6:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 80007e8:	23a0      	movs	r3, #160	; 0xa0
 80007ea:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 80007ec:	f7ff fe80 	bl	80004f0 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80007f0:	f107 020e 	add.w	r2, r7, #14
 80007f4:	f107 010f 	add.w	r1, r7, #15
 80007f8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2301      	movs	r3, #1
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <nrf24l01p_write_tx_fifo+0x44>)
 8000802:	f001 fe4e 	bl	80024a2 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8000806:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800080a:	2208      	movs	r2, #8
 800080c:	6879      	ldr	r1, [r7, #4]
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <nrf24l01p_write_tx_fifo+0x44>)
 8000810:	f001 fbec 	bl	8001fec <HAL_SPI_Transmit>
    cs_high();
 8000814:	f7ff fe60 	bl	80004d8 <cs_high>

    return status;
 8000818:	7bbb      	ldrb	r3, [r7, #14]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200000a4 	.word	0x200000a4

08000828 <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo()
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 800082e:	23e2      	movs	r3, #226	; 0xe2
 8000830:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000832:	f7ff fe5d 	bl	80004f0 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000836:	1dba      	adds	r2, r7, #6
 8000838:	1df9      	adds	r1, r7, #7
 800083a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	2301      	movs	r3, #1
 8000842:	4804      	ldr	r0, [pc, #16]	; (8000854 <nrf24l01p_flush_rx_fifo+0x2c>)
 8000844:	f001 fe2d 	bl	80024a2 <HAL_SPI_TransmitReceive>
    cs_high();
 8000848:	f7ff fe46 	bl	80004d8 <cs_high>
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	200000a4 	.word	0x200000a4

08000858 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 800085e:	23e1      	movs	r3, #225	; 0xe1
 8000860:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000862:	f7ff fe45 	bl	80004f0 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000866:	1dba      	adds	r2, r7, #6
 8000868:	1df9      	adds	r1, r7, #7
 800086a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	2301      	movs	r3, #1
 8000872:	4804      	ldr	r0, [pc, #16]	; (8000884 <nrf24l01p_flush_tx_fifo+0x2c>)
 8000874:	f001 fe15 	bl	80024a2 <HAL_SPI_TransmitReceive>
    cs_high();
 8000878:	f7ff fe2e 	bl	80004d8 <cs_high>
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200000a4 	.word	0x200000a4

08000888 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 800088e:	23ff      	movs	r3, #255	; 0xff
 8000890:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8000892:	f7ff fe2d 	bl	80004f0 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000896:	1dba      	adds	r2, r7, #6
 8000898:	1df9      	adds	r1, r7, #7
 800089a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2301      	movs	r3, #1
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <nrf24l01p_get_status+0x30>)
 80008a4:	f001 fdfd 	bl	80024a2 <HAL_SPI_TransmitReceive>
    cs_high();
 80008a8:	f7ff fe16 	bl	80004d8 <cs_high>

    return status;
 80008ac:	79bb      	ldrb	r3, [r7, #6]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200000a4 	.word	0x200000a4

080008bc <nrf24l01p_rx_set_payload_widths>:
{
    return read_register(NRF24L01P_REG_FIFO_STATUS);
}

void nrf24l01p_rx_set_payload_widths(widths bytes)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_RX_PW_P0, bytes);
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	4619      	mov	r1, r3
 80008ca:	2011      	movs	r0, #17
 80008cc:	f7ff fe5a 	bl	8000584 <write_register>
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <nrf24l01p_clear_rx_dr>:

void nrf24l01p_clear_rx_dr()
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 80008de:	f7ff ffd3 	bl	8000888 <nrf24l01p_get_status>
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x40;
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ec:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	4619      	mov	r1, r3
 80008f2:	2007      	movs	r0, #7
 80008f4:	f7ff fe46 	bl	8000584 <write_register>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <nrf24l01p_clear_tx_ds>:

void nrf24l01p_clear_tx_ds()
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8000906:	f7ff ffbf 	bl	8000888 <nrf24l01p_get_status>
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x20;
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	f043 0320 	orr.w	r3, r3, #32
 8000914:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	4619      	mov	r1, r3
 800091a:	2007      	movs	r0, #7
 800091c:	f7ff fe32 	bl	8000584 <write_register>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <nrf24l01p_clear_max_rt>:

void nrf24l01p_clear_max_rt()
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 800092e:	f7ff ffab 	bl	8000888 <nrf24l01p_get_status>
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x10;
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	f043 0310 	orr.w	r3, r3, #16
 800093c:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	4619      	mov	r1, r3
 8000942:	2007      	movs	r0, #7
 8000944:	f7ff fe1e 	bl	8000584 <write_register>
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <nrf24l01p_power_up>:

void nrf24l01p_power_up()
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000956:	2000      	movs	r0, #0
 8000958:	f7ff fdee 	bl	8000538 <read_register>
 800095c:	4603      	mov	r3, r0
 800095e:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	f043 0302 	orr.w	r3, r3, #2
 8000966:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	4619      	mov	r1, r3
 800096c:	2000      	movs	r0, #0
 800096e:	f7ff fe09 	bl	8000584 <write_register>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b084      	sub	sp, #16
 800097e:	af00      	add	r7, sp, #0
 8000980:	4603      	mov	r3, r0
 8000982:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000984:	2000      	movs	r0, #0
 8000986:	f7ff fdd7 	bl	8000538 <read_register>
 800098a:	4603      	mov	r3, r0
 800098c:	73fb      	strb	r3, [r7, #15]

    switch(bytes)
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d002      	beq.n	800099a <nrf24l01p_set_crc_length+0x20>
 8000994:	2b02      	cmp	r3, #2
 8000996:	d005      	beq.n	80009a4 <nrf24l01p_set_crc_length+0x2a>
 8000998:	e009      	b.n	80009ae <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	f023 0304 	bic.w	r3, r3, #4
 80009a0:	73fb      	strb	r3, [r7, #15]
            break;
 80009a2:	e004      	b.n	80009ae <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	f043 0304 	orr.w	r3, r3, #4
 80009aa:	73fb      	strb	r3, [r7, #15]
            break;
 80009ac:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	4619      	mov	r1, r3
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff fde6 	bl	8000584 <write_register>
}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	3b02      	subs	r3, #2
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	4619      	mov	r1, r3
 80009d2:	2003      	movs	r0, #3
 80009d4:	f7ff fdd6 	bl	8000584 <write_register>
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 80009ea:	2004      	movs	r0, #4
 80009ec:	f7ff fda4 	bl	8000538 <read_register>
 80009f0:	4603      	mov	r3, r0
 80009f2:	73fb      	strb	r3, [r7, #15]

    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	f063 030f 	orn	r3, r3, #15
 80009fa:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 80009fc:	7bfa      	ldrb	r2, [r7, #15]
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	4619      	mov	r1, r3
 8000a08:	2004      	movs	r0, #4
 8000a0a:	f7ff fdbb 	bl	8000584 <write_register>
}
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8000a22:	2004      	movs	r0, #4
 8000a24:	f7ff fd88 	bl	8000538 <read_register>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	f043 030f 	orr.w	r3, r3, #15
 8000a32:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 8000a34:	88fb      	ldrh	r3, [r7, #6]
 8000a36:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <nrf24l01p_auto_retransmit_delay+0x4c>)
 8000a38:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3c:	091b      	lsrs	r3, r3, #4
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	3b01      	subs	r3, #1
 8000a42:	011b      	lsls	r3, r3, #4
 8000a44:	b25a      	sxtb	r2, r3
 8000a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	b25b      	sxtb	r3, r3
 8000a4e:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	4619      	mov	r1, r3
 8000a54:	2004      	movs	r0, #4
 8000a56:	f7ff fd95 	bl	8000584 <write_register>
}
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	10624dd3 	.word	0x10624dd3

08000a68 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8000a72:	88fb      	ldrh	r3, [r7, #6]
 8000a74:	f5a3 6316 	sub.w	r3, r3, #2400	; 0x960
 8000a78:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8000a7a:	89fb      	ldrh	r3, [r7, #14]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	4619      	mov	r1, r3
 8000a80:	2005      	movs	r0, #5
 8000a82:	f7ff fd7f 	bl	8000584 <write_register>
}
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b084      	sub	sp, #16
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	4603      	mov	r3, r0
 8000a96:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8000a98:	2006      	movs	r0, #6
 8000a9a:	f7ff fd4d 	bl	8000538 <read_register>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	f023 0306 	bic.w	r3, r3, #6
 8000aa4:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	b25a      	sxtb	r2, r3
 8000aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	b25b      	sxtb	r3, r3
 8000ab4:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	2006      	movs	r0, #6
 8000abc:	f7ff fd62 	bl	8000584 <write_register>
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8000ad2:	2006      	movs	r0, #6
 8000ad4:	f7ff fd30 	bl	8000538 <read_register>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000ade:	73fb      	strb	r3, [r7, #15]

    switch(bps)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d00a      	beq.n	8000afc <nrf24l01p_set_rf_air_data_rate+0x34>
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	dc0e      	bgt.n	8000b08 <nrf24l01p_set_rf_air_data_rate+0x40>
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d00b      	beq.n	8000b06 <nrf24l01p_set_rf_air_data_rate+0x3e>
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d10a      	bne.n	8000b08 <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps:
            break;
        case _2Mbps:
            new_rf_setup |= 1 << 3;
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	f043 0308 	orr.w	r3, r3, #8
 8000af8:	73fb      	strb	r3, [r7, #15]
            break;
 8000afa:	e005      	b.n	8000b08 <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	f043 0320 	orr.w	r3, r3, #32
 8000b02:	73fb      	strb	r3, [r7, #15]
            break;
 8000b04:	e000      	b.n	8000b08 <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 8000b06:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	2006      	movs	r0, #6
 8000b0e:	f7ff fd39 	bl	8000584 <write_register>
}
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_SPI1_Init+0x64>)
 8000b22:	4a18      	ldr	r2, [pc, #96]	; (8000b84 <MX_SPI1_Init+0x68>)
 8000b24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <MX_SPI1_Init+0x64>)
 8000b28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_SPI1_Init+0x64>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_SPI1_Init+0x64>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_SPI1_Init+0x64>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_SPI1_Init+0x64>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_SPI1_Init+0x64>)
 8000b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_SPI1_Init+0x64>)
 8000b50:	2210      	movs	r2, #16
 8000b52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <MX_SPI1_Init+0x64>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_SPI1_Init+0x64>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <MX_SPI1_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_SPI1_Init+0x64>)
 8000b68:	220a      	movs	r2, #10
 8000b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_SPI1_Init+0x64>)
 8000b6e:	f001 f9b9 	bl	8001ee4 <HAL_SPI_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b78:	f7ff fca8 	bl	80004cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200000a4 	.word	0x200000a4
 8000b84:	40013000 	.word	0x40013000

08000b88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0310 	add.w	r3, r7, #16
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <HAL_SPI_MspInit+0x88>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d12f      	bne.n	8000c08 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <HAL_SPI_MspInit+0x8c>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <HAL_SPI_MspInit+0x8c>)
 8000bae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <HAL_SPI_MspInit+0x8c>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <HAL_SPI_MspInit+0x8c>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a13      	ldr	r2, [pc, #76]	; (8000c14 <HAL_SPI_MspInit+0x8c>)
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_SPI_MspInit+0x8c>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0304 	and.w	r3, r3, #4
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000bd8:	23a0      	movs	r3, #160	; 0xa0
 8000bda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	4619      	mov	r1, r3
 8000bea:	480b      	ldr	r0, [pc, #44]	; (8000c18 <HAL_SPI_MspInit+0x90>)
 8000bec:	f000 fb9c 	bl	8001328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bf0:	2340      	movs	r3, #64	; 0x40
 8000bf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	4619      	mov	r1, r3
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <HAL_SPI_MspInit+0x90>)
 8000c04:	f000 fb90 	bl	8001328 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c08:	bf00      	nop
 8000c0a:	3720      	adds	r7, #32
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40013000 	.word	0x40013000
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40010800 	.word	0x40010800

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_MspInit+0x5c>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	4a14      	ldr	r2, [pc, #80]	; (8000c78 <HAL_MspInit+0x5c>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6193      	str	r3, [r2, #24]
 8000c2e:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_MspInit+0x5c>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <HAL_MspInit+0x5c>)
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <HAL_MspInit+0x5c>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c44:	61d3      	str	r3, [r2, #28]
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <HAL_MspInit+0x5c>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <HAL_MspInit+0x60>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_MspInit+0x60>)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40010000 	.word	0x40010000

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <NMI_Handler+0x4>

08000c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <MemManage_Handler+0x4>

08000c92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <UsageFault_Handler+0x4>

08000c9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr

08000caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr

08000cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr

08000cc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc6:	f000 f9e1 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8000cd2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000cd6:	f000 fcdd 	bl	8001694 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <TIM1_BRK_IRQHandler+0x10>)
 8000ce6:	f001 fed4 	bl	8002a92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000100 	.word	0x20000100

08000cf4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <TIM1_UP_IRQHandler+0x10>)
 8000cfa:	f001 feca 	bl	8002a92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000100 	.word	0x20000100

08000d08 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <TIM1_TRG_COM_IRQHandler+0x10>)
 8000d0e:	f001 fec0 	bl	8002a92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000100 	.word	0x20000100

08000d1c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <TIM1_CC_IRQHandler+0x10>)
 8000d22:	f001 feb6 	bl	8002a92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000100 	.word	0x20000100

08000d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d38:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <_sbrk+0x5c>)
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <_sbrk+0x60>)
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <_sbrk+0x64>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <_sbrk+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d207      	bcs.n	8000d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d60:	f002 fbc2 	bl	80034e8 <__errno>
 8000d64:	4603      	mov	r3, r0
 8000d66:	220c      	movs	r2, #12
 8000d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	e009      	b.n	8000d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <_sbrk+0x64>)
 8000d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20005000 	.word	0x20005000
 8000d90:	00000400 	.word	0x00000400
 8000d94:	200000fc 	.word	0x200000fc
 8000d98:	200001a8 	.word	0x200001a8

08000d9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <MX_TIM1_Init+0x9c>)
 8000dc6:	4a20      	ldr	r2, [pc, #128]	; (8000e48 <MX_TIM1_Init+0xa0>)
 8000dc8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 480;
 8000dca:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <MX_TIM1_Init+0x9c>)
 8000dcc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000dd0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <MX_TIM1_Init+0x9c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_TIM1_Init+0x9c>)
 8000dda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <MX_TIM1_Init+0x9c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <MX_TIM1_Init+0x9c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dec:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <MX_TIM1_Init+0x9c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000df2:	4814      	ldr	r0, [pc, #80]	; (8000e44 <MX_TIM1_Init+0x9c>)
 8000df4:	f001 fdfe 	bl	80029f4 <HAL_TIM_Base_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000dfe:	f7ff fb65 	bl	80004cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e08:	f107 0308 	add.w	r3, r7, #8
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480d      	ldr	r0, [pc, #52]	; (8000e44 <MX_TIM1_Init+0x9c>)
 8000e10:	f001 ff47 	bl	8002ca2 <HAL_TIM_ConfigClockSource>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000e1a:	f7ff fb57 	bl	80004cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e26:	463b      	mov	r3, r7
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4806      	ldr	r0, [pc, #24]	; (8000e44 <MX_TIM1_Init+0x9c>)
 8000e2c:	f002 f91c 	bl	8003068 <HAL_TIMEx_MasterConfigSynchronization>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000e36:	f7ff fb49 	bl	80004cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000100 	.word	0x20000100
 8000e48:	40012c00 	.word	0x40012c00

08000e4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <HAL_TIM_Base_MspInit+0x74>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d12b      	bne.n	8000eb6 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e5e:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <HAL_TIM_Base_MspInit+0x78>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <HAL_TIM_Base_MspInit+0x78>)
 8000e64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e68:	6193      	str	r3, [r2, #24]
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <HAL_TIM_Base_MspInit+0x78>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 1, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2101      	movs	r1, #1
 8000e7a:	2018      	movs	r0, #24
 8000e7c:	f000 fa1d 	bl	80012ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000e80:	2018      	movs	r0, #24
 8000e82:	f000 fa36 	bl	80012f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2101      	movs	r1, #1
 8000e8a:	2019      	movs	r0, #25
 8000e8c:	f000 fa15 	bl	80012ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e90:	2019      	movs	r0, #25
 8000e92:	f000 fa2e 	bl	80012f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 1, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2101      	movs	r1, #1
 8000e9a:	201a      	movs	r0, #26
 8000e9c:	f000 fa0d 	bl	80012ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000ea0:	201a      	movs	r0, #26
 8000ea2:	f000 fa26 	bl	80012f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	201b      	movs	r0, #27
 8000eac:	f000 fa05 	bl	80012ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000eb0:	201b      	movs	r0, #27
 8000eb2:	f000 fa1e 	bl	80012f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40012c00 	.word	0x40012c00
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <MX_USART1_UART_Init+0x50>)
 8000ed0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ed4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ed8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000eee:	220c      	movs	r2, #12
 8000ef0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000f00:	f002 f922 	bl	8003148 <HAL_UART_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f0a:	f7ff fadf 	bl	80004cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000148 	.word	0x20000148
 8000f18:	40013800 	.word	0x40013800

08000f1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a1c      	ldr	r2, [pc, #112]	; (8000fa8 <HAL_UART_MspInit+0x8c>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d131      	bne.n	8000fa0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <HAL_UART_MspInit+0x90>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a1a      	ldr	r2, [pc, #104]	; (8000fac <HAL_UART_MspInit+0x90>)
 8000f42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <HAL_UART_MspInit+0x90>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_UART_MspInit+0x90>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a14      	ldr	r2, [pc, #80]	; (8000fac <HAL_UART_MspInit+0x90>)
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_UART_MspInit+0x90>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480b      	ldr	r0, [pc, #44]	; (8000fb0 <HAL_UART_MspInit+0x94>)
 8000f82:	f000 f9d1 	bl	8001328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <HAL_UART_MspInit+0x94>)
 8000f9c:	f000 f9c4 	bl	8001328 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	3720      	adds	r7, #32
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40013800 	.word	0x40013800
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40010800 	.word	0x40010800

08000fb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fb4:	f7ff fef2 	bl	8000d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb8:	480b      	ldr	r0, [pc, #44]	; (8000fe8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fba:	490c      	ldr	r1, [pc, #48]	; (8000fec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fbc:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a09      	ldr	r2, [pc, #36]	; (8000ff4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fd0:	4c09      	ldr	r4, [pc, #36]	; (8000ff8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fde:	f002 fa89 	bl	80034f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fe2:	f7ff f981 	bl	80002e8 <main>
  bx lr
 8000fe6:	4770      	bx	lr
  ldr r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fec:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000ff0:	08003ec8 	.word	0x08003ec8
  ldr r2, =_sbss
 8000ff4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ff8:	200001a4 	.word	0x200001a4

08000ffc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC1_2_IRQHandler>
	...

08001000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <HAL_Init+0x28>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a07      	ldr	r2, [pc, #28]	; (8001028 <HAL_Init+0x28>)
 800100a:	f043 0310 	orr.w	r3, r3, #16
 800100e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f000 f947 	bl	80012a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001016:	200f      	movs	r0, #15
 8001018:	f000 f808 	bl	800102c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800101c:	f7ff fdfe 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40022000 	.word	0x40022000

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_InitTick+0x54>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_InitTick+0x58>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001042:	fbb3 f3f1 	udiv	r3, r3, r1
 8001046:	fbb2 f3f3 	udiv	r3, r2, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f95f 	bl	800130e <HAL_SYSTICK_Config>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e00e      	b.n	8001078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b0f      	cmp	r3, #15
 800105e:	d80a      	bhi.n	8001076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001060:	2200      	movs	r2, #0
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f000 f927 	bl	80012ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800106c:	4a06      	ldr	r2, [pc, #24]	; (8001088 <HAL_InitTick+0x5c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	e000      	b.n	8001078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	2000000c 	.word	0x2000000c
 8001084:	20000014 	.word	0x20000014
 8001088:	20000010 	.word	0x20000010

0800108c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_IncTick+0x1c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <HAL_IncTick+0x20>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a03      	ldr	r2, [pc, #12]	; (80010ac <HAL_IncTick+0x20>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	20000014 	.word	0x20000014
 80010ac:	20000190 	.word	0x20000190

080010b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return uwTick;
 80010b4:	4b02      	ldr	r3, [pc, #8]	; (80010c0 <HAL_GetTick+0x10>)
 80010b6:	681b      	ldr	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	20000190 	.word	0x20000190

080010c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff fff0 	bl	80010b0 <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010dc:	d005      	beq.n	80010ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_Delay+0x44>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ea:	bf00      	nop
 80010ec:	f7ff ffe0 	bl	80010b0 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d8f7      	bhi.n	80010ec <HAL_Delay+0x28>
  {
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000014 	.word	0x20000014

0800110c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60d3      	str	r3, [r2, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db0b      	blt.n	800119a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 021f 	and.w	r2, r3, #31
 8001188:	4906      	ldr	r1, [pc, #24]	; (80011a4 <__NVIC_EnableIRQ+0x34>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	2001      	movs	r0, #1
 8001192:	fa00 f202 	lsl.w	r2, r0, r2
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100

080011a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	db0a      	blt.n	80011d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	490c      	ldr	r1, [pc, #48]	; (80011f4 <__NVIC_SetPriority+0x4c>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	0112      	lsls	r2, r2, #4
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	440b      	add	r3, r1
 80011cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d0:	e00a      	b.n	80011e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4908      	ldr	r1, [pc, #32]	; (80011f8 <__NVIC_SetPriority+0x50>)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	3b04      	subs	r3, #4
 80011e0:	0112      	lsls	r2, r2, #4
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	440b      	add	r3, r1
 80011e6:	761a      	strb	r2, [r3, #24]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000e100 	.word	0xe000e100
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b089      	sub	sp, #36	; 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f1c3 0307 	rsb	r3, r3, #7
 8001216:	2b04      	cmp	r3, #4
 8001218:	bf28      	it	cs
 800121a:	2304      	movcs	r3, #4
 800121c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3304      	adds	r3, #4
 8001222:	2b06      	cmp	r3, #6
 8001224:	d902      	bls.n	800122c <NVIC_EncodePriority+0x30>
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3b03      	subs	r3, #3
 800122a:	e000      	b.n	800122e <NVIC_EncodePriority+0x32>
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	f04f 32ff 	mov.w	r2, #4294967295
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43da      	mvns	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	401a      	ands	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001244:	f04f 31ff 	mov.w	r1, #4294967295
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	43d9      	mvns	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	4313      	orrs	r3, r2
         );
}
 8001256:	4618      	mov	r0, r3
 8001258:	3724      	adds	r7, #36	; 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001270:	d301      	bcc.n	8001276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001272:	2301      	movs	r3, #1
 8001274:	e00f      	b.n	8001296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <SysTick_Config+0x40>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127e:	210f      	movs	r1, #15
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f7ff ff90 	bl	80011a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <SysTick_Config+0x40>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <SysTick_Config+0x40>)
 8001290:	2207      	movs	r2, #7
 8001292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	e000e010 	.word	0xe000e010

080012a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ff2d 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012cc:	f7ff ff42 	bl	8001154 <__NVIC_GetPriorityGrouping>
 80012d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	68b9      	ldr	r1, [r7, #8]
 80012d6:	6978      	ldr	r0, [r7, #20]
 80012d8:	f7ff ff90 	bl	80011fc <NVIC_EncodePriority>
 80012dc:	4602      	mov	r2, r0
 80012de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff5f 	bl	80011a8 <__NVIC_SetPriority>
}
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff35 	bl	8001170 <__NVIC_EnableIRQ>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ffa2 	bl	8001260 <SysTick_Config>
 800131c:	4603      	mov	r3, r0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001328:	b480      	push	{r7}
 800132a:	b08b      	sub	sp, #44	; 0x2c
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133a:	e169      	b.n	8001610 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800133c:	2201      	movs	r2, #1
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	69fa      	ldr	r2, [r7, #28]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	429a      	cmp	r2, r3
 8001356:	f040 8158 	bne.w	800160a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	4a9a      	ldr	r2, [pc, #616]	; (80015c8 <HAL_GPIO_Init+0x2a0>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d05e      	beq.n	8001422 <HAL_GPIO_Init+0xfa>
 8001364:	4a98      	ldr	r2, [pc, #608]	; (80015c8 <HAL_GPIO_Init+0x2a0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d875      	bhi.n	8001456 <HAL_GPIO_Init+0x12e>
 800136a:	4a98      	ldr	r2, [pc, #608]	; (80015cc <HAL_GPIO_Init+0x2a4>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d058      	beq.n	8001422 <HAL_GPIO_Init+0xfa>
 8001370:	4a96      	ldr	r2, [pc, #600]	; (80015cc <HAL_GPIO_Init+0x2a4>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d86f      	bhi.n	8001456 <HAL_GPIO_Init+0x12e>
 8001376:	4a96      	ldr	r2, [pc, #600]	; (80015d0 <HAL_GPIO_Init+0x2a8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d052      	beq.n	8001422 <HAL_GPIO_Init+0xfa>
 800137c:	4a94      	ldr	r2, [pc, #592]	; (80015d0 <HAL_GPIO_Init+0x2a8>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d869      	bhi.n	8001456 <HAL_GPIO_Init+0x12e>
 8001382:	4a94      	ldr	r2, [pc, #592]	; (80015d4 <HAL_GPIO_Init+0x2ac>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d04c      	beq.n	8001422 <HAL_GPIO_Init+0xfa>
 8001388:	4a92      	ldr	r2, [pc, #584]	; (80015d4 <HAL_GPIO_Init+0x2ac>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d863      	bhi.n	8001456 <HAL_GPIO_Init+0x12e>
 800138e:	4a92      	ldr	r2, [pc, #584]	; (80015d8 <HAL_GPIO_Init+0x2b0>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d046      	beq.n	8001422 <HAL_GPIO_Init+0xfa>
 8001394:	4a90      	ldr	r2, [pc, #576]	; (80015d8 <HAL_GPIO_Init+0x2b0>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d85d      	bhi.n	8001456 <HAL_GPIO_Init+0x12e>
 800139a:	2b12      	cmp	r3, #18
 800139c:	d82a      	bhi.n	80013f4 <HAL_GPIO_Init+0xcc>
 800139e:	2b12      	cmp	r3, #18
 80013a0:	d859      	bhi.n	8001456 <HAL_GPIO_Init+0x12e>
 80013a2:	a201      	add	r2, pc, #4	; (adr r2, 80013a8 <HAL_GPIO_Init+0x80>)
 80013a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a8:	08001423 	.word	0x08001423
 80013ac:	080013fd 	.word	0x080013fd
 80013b0:	0800140f 	.word	0x0800140f
 80013b4:	08001451 	.word	0x08001451
 80013b8:	08001457 	.word	0x08001457
 80013bc:	08001457 	.word	0x08001457
 80013c0:	08001457 	.word	0x08001457
 80013c4:	08001457 	.word	0x08001457
 80013c8:	08001457 	.word	0x08001457
 80013cc:	08001457 	.word	0x08001457
 80013d0:	08001457 	.word	0x08001457
 80013d4:	08001457 	.word	0x08001457
 80013d8:	08001457 	.word	0x08001457
 80013dc:	08001457 	.word	0x08001457
 80013e0:	08001457 	.word	0x08001457
 80013e4:	08001457 	.word	0x08001457
 80013e8:	08001457 	.word	0x08001457
 80013ec:	08001405 	.word	0x08001405
 80013f0:	08001419 	.word	0x08001419
 80013f4:	4a79      	ldr	r2, [pc, #484]	; (80015dc <HAL_GPIO_Init+0x2b4>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d013      	beq.n	8001422 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013fa:	e02c      	b.n	8001456 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	623b      	str	r3, [r7, #32]
          break;
 8001402:	e029      	b.n	8001458 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	3304      	adds	r3, #4
 800140a:	623b      	str	r3, [r7, #32]
          break;
 800140c:	e024      	b.n	8001458 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	3308      	adds	r3, #8
 8001414:	623b      	str	r3, [r7, #32]
          break;
 8001416:	e01f      	b.n	8001458 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	330c      	adds	r3, #12
 800141e:	623b      	str	r3, [r7, #32]
          break;
 8001420:	e01a      	b.n	8001458 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d102      	bne.n	8001430 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800142a:	2304      	movs	r3, #4
 800142c:	623b      	str	r3, [r7, #32]
          break;
 800142e:	e013      	b.n	8001458 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d105      	bne.n	8001444 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001438:	2308      	movs	r3, #8
 800143a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69fa      	ldr	r2, [r7, #28]
 8001440:	611a      	str	r2, [r3, #16]
          break;
 8001442:	e009      	b.n	8001458 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001444:	2308      	movs	r3, #8
 8001446:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	615a      	str	r2, [r3, #20]
          break;
 800144e:	e003      	b.n	8001458 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
          break;
 8001454:	e000      	b.n	8001458 <HAL_GPIO_Init+0x130>
          break;
 8001456:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	2bff      	cmp	r3, #255	; 0xff
 800145c:	d801      	bhi.n	8001462 <HAL_GPIO_Init+0x13a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	e001      	b.n	8001466 <HAL_GPIO_Init+0x13e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3304      	adds	r3, #4
 8001466:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2bff      	cmp	r3, #255	; 0xff
 800146c:	d802      	bhi.n	8001474 <HAL_GPIO_Init+0x14c>
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	e002      	b.n	800147a <HAL_GPIO_Init+0x152>
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	3b08      	subs	r3, #8
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	210f      	movs	r1, #15
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	fa01 f303 	lsl.w	r3, r1, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	401a      	ands	r2, r3
 800148c:	6a39      	ldr	r1, [r7, #32]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	fa01 f303 	lsl.w	r3, r1, r3
 8001494:	431a      	orrs	r2, r3
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 80b1 	beq.w	800160a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014a8:	4b4d      	ldr	r3, [pc, #308]	; (80015e0 <HAL_GPIO_Init+0x2b8>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	4a4c      	ldr	r2, [pc, #304]	; (80015e0 <HAL_GPIO_Init+0x2b8>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6193      	str	r3, [r2, #24]
 80014b4:	4b4a      	ldr	r3, [pc, #296]	; (80015e0 <HAL_GPIO_Init+0x2b8>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014c0:	4a48      	ldr	r2, [pc, #288]	; (80015e4 <HAL_GPIO_Init+0x2bc>)
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3302      	adds	r3, #2
 80014c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	220f      	movs	r2, #15
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	4013      	ands	r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a40      	ldr	r2, [pc, #256]	; (80015e8 <HAL_GPIO_Init+0x2c0>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d013      	beq.n	8001514 <HAL_GPIO_Init+0x1ec>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a3f      	ldr	r2, [pc, #252]	; (80015ec <HAL_GPIO_Init+0x2c4>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d00d      	beq.n	8001510 <HAL_GPIO_Init+0x1e8>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a3e      	ldr	r2, [pc, #248]	; (80015f0 <HAL_GPIO_Init+0x2c8>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d007      	beq.n	800150c <HAL_GPIO_Init+0x1e4>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a3d      	ldr	r2, [pc, #244]	; (80015f4 <HAL_GPIO_Init+0x2cc>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d101      	bne.n	8001508 <HAL_GPIO_Init+0x1e0>
 8001504:	2303      	movs	r3, #3
 8001506:	e006      	b.n	8001516 <HAL_GPIO_Init+0x1ee>
 8001508:	2304      	movs	r3, #4
 800150a:	e004      	b.n	8001516 <HAL_GPIO_Init+0x1ee>
 800150c:	2302      	movs	r3, #2
 800150e:	e002      	b.n	8001516 <HAL_GPIO_Init+0x1ee>
 8001510:	2301      	movs	r3, #1
 8001512:	e000      	b.n	8001516 <HAL_GPIO_Init+0x1ee>
 8001514:	2300      	movs	r3, #0
 8001516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001518:	f002 0203 	and.w	r2, r2, #3
 800151c:	0092      	lsls	r2, r2, #2
 800151e:	4093      	lsls	r3, r2
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	4313      	orrs	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001526:	492f      	ldr	r1, [pc, #188]	; (80015e4 <HAL_GPIO_Init+0x2bc>)
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	089b      	lsrs	r3, r3, #2
 800152c:	3302      	adds	r3, #2
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d006      	beq.n	800154e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001540:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	492c      	ldr	r1, [pc, #176]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	4313      	orrs	r3, r2
 800154a:	608b      	str	r3, [r1, #8]
 800154c:	e006      	b.n	800155c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800154e:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	43db      	mvns	r3, r3
 8001556:	4928      	ldr	r1, [pc, #160]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 8001558:	4013      	ands	r3, r2
 800155a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d006      	beq.n	8001576 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001568:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 800156a:	68da      	ldr	r2, [r3, #12]
 800156c:	4922      	ldr	r1, [pc, #136]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	60cb      	str	r3, [r1, #12]
 8001574:	e006      	b.n	8001584 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001576:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 8001578:	68da      	ldr	r2, [r3, #12]
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	43db      	mvns	r3, r3
 800157e:	491e      	ldr	r1, [pc, #120]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 8001580:	4013      	ands	r3, r2
 8001582:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d006      	beq.n	800159e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001590:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	4918      	ldr	r1, [pc, #96]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	604b      	str	r3, [r1, #4]
 800159c:	e006      	b.n	80015ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	4914      	ldr	r1, [pc, #80]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d021      	beq.n	80015fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	490e      	ldr	r1, [pc, #56]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	600b      	str	r3, [r1, #0]
 80015c4:	e021      	b.n	800160a <HAL_GPIO_Init+0x2e2>
 80015c6:	bf00      	nop
 80015c8:	10320000 	.word	0x10320000
 80015cc:	10310000 	.word	0x10310000
 80015d0:	10220000 	.word	0x10220000
 80015d4:	10210000 	.word	0x10210000
 80015d8:	10120000 	.word	0x10120000
 80015dc:	10110000 	.word	0x10110000
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40010000 	.word	0x40010000
 80015e8:	40010800 	.word	0x40010800
 80015ec:	40010c00 	.word	0x40010c00
 80015f0:	40011000 	.word	0x40011000
 80015f4:	40011400 	.word	0x40011400
 80015f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_GPIO_Init+0x304>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	43db      	mvns	r3, r3
 8001604:	4909      	ldr	r1, [pc, #36]	; (800162c <HAL_GPIO_Init+0x304>)
 8001606:	4013      	ands	r3, r2
 8001608:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	3301      	adds	r3, #1
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	fa22 f303 	lsr.w	r3, r2, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	f47f ae8e 	bne.w	800133c <HAL_GPIO_Init+0x14>
  }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	372c      	adds	r7, #44	; 0x2c
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	40010400 	.word	0x40010400

08001630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	807b      	strh	r3, [r7, #2]
 800163c:	4613      	mov	r3, r2
 800163e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001640:	787b      	ldrb	r3, [r7, #1]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800164c:	e003      	b.n	8001656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800164e:	887b      	ldrh	r3, [r7, #2]
 8001650:	041a      	lsls	r2, r3, #16
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	611a      	str	r2, [r3, #16]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001672:	887a      	ldrh	r2, [r7, #2]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4013      	ands	r3, r2
 8001678:	041a      	lsls	r2, r3, #16
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	43d9      	mvns	r1, r3
 800167e:	887b      	ldrh	r3, [r7, #2]
 8001680:	400b      	ands	r3, r1
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	611a      	str	r2, [r3, #16]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
	...

08001694 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d006      	beq.n	80016b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe fee4 	bl	8000480 <HAL_GPIO_EXTI_Callback>
  }
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40010400 	.word	0x40010400

080016c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e272      	b.n	8001bbc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 8087 	beq.w	80017f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016e4:	4b92      	ldr	r3, [pc, #584]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d00c      	beq.n	800170a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016f0:	4b8f      	ldr	r3, [pc, #572]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 030c 	and.w	r3, r3, #12
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d112      	bne.n	8001722 <HAL_RCC_OscConfig+0x5e>
 80016fc:	4b8c      	ldr	r3, [pc, #560]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001708:	d10b      	bne.n	8001722 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170a:	4b89      	ldr	r3, [pc, #548]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d06c      	beq.n	80017f0 <HAL_RCC_OscConfig+0x12c>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d168      	bne.n	80017f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e24c      	b.n	8001bbc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172a:	d106      	bne.n	800173a <HAL_RCC_OscConfig+0x76>
 800172c:	4b80      	ldr	r3, [pc, #512]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a7f      	ldr	r2, [pc, #508]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 8001732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	e02e      	b.n	8001798 <HAL_RCC_OscConfig+0xd4>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0x98>
 8001742:	4b7b      	ldr	r3, [pc, #492]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a7a      	ldr	r2, [pc, #488]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 8001748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b78      	ldr	r3, [pc, #480]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a77      	ldr	r2, [pc, #476]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 8001754:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e01d      	b.n	8001798 <HAL_RCC_OscConfig+0xd4>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001764:	d10c      	bne.n	8001780 <HAL_RCC_OscConfig+0xbc>
 8001766:	4b72      	ldr	r3, [pc, #456]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a71      	ldr	r2, [pc, #452]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 800176c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	4b6f      	ldr	r3, [pc, #444]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a6e      	ldr	r2, [pc, #440]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 8001778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	e00b      	b.n	8001798 <HAL_RCC_OscConfig+0xd4>
 8001780:	4b6b      	ldr	r3, [pc, #428]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a6a      	ldr	r2, [pc, #424]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 8001786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b68      	ldr	r3, [pc, #416]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a67      	ldr	r2, [pc, #412]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 8001792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001796:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d013      	beq.n	80017c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a0:	f7ff fc86 	bl	80010b0 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a8:	f7ff fc82 	bl	80010b0 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b64      	cmp	r3, #100	; 0x64
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e200      	b.n	8001bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ba:	4b5d      	ldr	r3, [pc, #372]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0xe4>
 80017c6:	e014      	b.n	80017f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff fc72 	bl	80010b0 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d0:	f7ff fc6e 	bl	80010b0 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	; 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e1ec      	b.n	8001bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e2:	4b53      	ldr	r3, [pc, #332]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x10c>
 80017ee:	e000      	b.n	80017f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d063      	beq.n	80018c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017fe:	4b4c      	ldr	r3, [pc, #304]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 030c 	and.w	r3, r3, #12
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00b      	beq.n	8001822 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800180a:	4b49      	ldr	r3, [pc, #292]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 030c 	and.w	r3, r3, #12
 8001812:	2b08      	cmp	r3, #8
 8001814:	d11c      	bne.n	8001850 <HAL_RCC_OscConfig+0x18c>
 8001816:	4b46      	ldr	r3, [pc, #280]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d116      	bne.n	8001850 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001822:	4b43      	ldr	r3, [pc, #268]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d005      	beq.n	800183a <HAL_RCC_OscConfig+0x176>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d001      	beq.n	800183a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e1c0      	b.n	8001bbc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183a:	4b3d      	ldr	r3, [pc, #244]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	4939      	ldr	r1, [pc, #228]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 800184a:	4313      	orrs	r3, r2
 800184c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184e:	e03a      	b.n	80018c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d020      	beq.n	800189a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001858:	4b36      	ldr	r3, [pc, #216]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185e:	f7ff fc27 	bl	80010b0 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001866:	f7ff fc23 	bl	80010b0 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e1a1      	b.n	8001bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001878:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001884:	4b2a      	ldr	r3, [pc, #168]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	4927      	ldr	r1, [pc, #156]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 8001894:	4313      	orrs	r3, r2
 8001896:	600b      	str	r3, [r1, #0]
 8001898:	e015      	b.n	80018c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800189a:	4b26      	ldr	r3, [pc, #152]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a0:	f7ff fc06 	bl	80010b0 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a8:	f7ff fc02 	bl	80010b0 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e180      	b.n	8001bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ba:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d03a      	beq.n	8001948 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d019      	beq.n	800190e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_RCC_OscConfig+0x274>)
 80018dc:	2201      	movs	r2, #1
 80018de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e0:	f7ff fbe6 	bl	80010b0 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e8:	f7ff fbe2 	bl	80010b0 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e160      	b.n	8001bbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001906:	2001      	movs	r0, #1
 8001908:	f000 face 	bl	8001ea8 <RCC_Delay>
 800190c:	e01c      	b.n	8001948 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <HAL_RCC_OscConfig+0x274>)
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001914:	f7ff fbcc 	bl	80010b0 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800191a:	e00f      	b.n	800193c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800191c:	f7ff fbc8 	bl	80010b0 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d908      	bls.n	800193c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e146      	b.n	8001bbc <HAL_RCC_OscConfig+0x4f8>
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000
 8001934:	42420000 	.word	0x42420000
 8001938:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800193c:	4b92      	ldr	r3, [pc, #584]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1e9      	bne.n	800191c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 80a6 	beq.w	8001aa2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800195a:	4b8b      	ldr	r3, [pc, #556]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10d      	bne.n	8001982 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001966:	4b88      	ldr	r3, [pc, #544]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	4a87      	ldr	r2, [pc, #540]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 800196c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001970:	61d3      	str	r3, [r2, #28]
 8001972:	4b85      	ldr	r3, [pc, #532]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800197e:	2301      	movs	r3, #1
 8001980:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001982:	4b82      	ldr	r3, [pc, #520]	; (8001b8c <HAL_RCC_OscConfig+0x4c8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198a:	2b00      	cmp	r3, #0
 800198c:	d118      	bne.n	80019c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800198e:	4b7f      	ldr	r3, [pc, #508]	; (8001b8c <HAL_RCC_OscConfig+0x4c8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a7e      	ldr	r2, [pc, #504]	; (8001b8c <HAL_RCC_OscConfig+0x4c8>)
 8001994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001998:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800199a:	f7ff fb89 	bl	80010b0 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a2:	f7ff fb85 	bl	80010b0 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b64      	cmp	r3, #100	; 0x64
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e103      	b.n	8001bbc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b4:	4b75      	ldr	r3, [pc, #468]	; (8001b8c <HAL_RCC_OscConfig+0x4c8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d106      	bne.n	80019d6 <HAL_RCC_OscConfig+0x312>
 80019c8:	4b6f      	ldr	r3, [pc, #444]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	4a6e      	ldr	r2, [pc, #440]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6213      	str	r3, [r2, #32]
 80019d4:	e02d      	b.n	8001a32 <HAL_RCC_OscConfig+0x36e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x334>
 80019de:	4b6a      	ldr	r3, [pc, #424]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	4a69      	ldr	r2, [pc, #420]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	f023 0301 	bic.w	r3, r3, #1
 80019e8:	6213      	str	r3, [r2, #32]
 80019ea:	4b67      	ldr	r3, [pc, #412]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	4a66      	ldr	r2, [pc, #408]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	f023 0304 	bic.w	r3, r3, #4
 80019f4:	6213      	str	r3, [r2, #32]
 80019f6:	e01c      	b.n	8001a32 <HAL_RCC_OscConfig+0x36e>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2b05      	cmp	r3, #5
 80019fe:	d10c      	bne.n	8001a1a <HAL_RCC_OscConfig+0x356>
 8001a00:	4b61      	ldr	r3, [pc, #388]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	4a60      	ldr	r2, [pc, #384]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	f043 0304 	orr.w	r3, r3, #4
 8001a0a:	6213      	str	r3, [r2, #32]
 8001a0c:	4b5e      	ldr	r3, [pc, #376]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	4a5d      	ldr	r2, [pc, #372]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6213      	str	r3, [r2, #32]
 8001a18:	e00b      	b.n	8001a32 <HAL_RCC_OscConfig+0x36e>
 8001a1a:	4b5b      	ldr	r3, [pc, #364]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	4a5a      	ldr	r2, [pc, #360]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	6213      	str	r3, [r2, #32]
 8001a26:	4b58      	ldr	r3, [pc, #352]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	4a57      	ldr	r2, [pc, #348]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	f023 0304 	bic.w	r3, r3, #4
 8001a30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d015      	beq.n	8001a66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3a:	f7ff fb39 	bl	80010b0 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a40:	e00a      	b.n	8001a58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a42:	f7ff fb35 	bl	80010b0 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e0b1      	b.n	8001bbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a58:	4b4b      	ldr	r3, [pc, #300]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0ee      	beq.n	8001a42 <HAL_RCC_OscConfig+0x37e>
 8001a64:	e014      	b.n	8001a90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a66:	f7ff fb23 	bl	80010b0 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a6c:	e00a      	b.n	8001a84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6e:	f7ff fb1f 	bl	80010b0 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e09b      	b.n	8001bbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a84:	4b40      	ldr	r3, [pc, #256]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1ee      	bne.n	8001a6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a90:	7dfb      	ldrb	r3, [r7, #23]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d105      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a96:	4b3c      	ldr	r3, [pc, #240]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	4a3b      	ldr	r2, [pc, #236]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 8087 	beq.w	8001bba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aac:	4b36      	ldr	r3, [pc, #216]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 030c 	and.w	r3, r3, #12
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d061      	beq.n	8001b7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d146      	bne.n	8001b4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac0:	4b33      	ldr	r3, [pc, #204]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac6:	f7ff faf3 	bl	80010b0 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ace:	f7ff faef 	bl	80010b0 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e06d      	b.n	8001bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae0:	4b29      	ldr	r3, [pc, #164]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f0      	bne.n	8001ace <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af4:	d108      	bne.n	8001b08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	4921      	ldr	r1, [pc, #132]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b08:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a19      	ldr	r1, [r3, #32]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	430b      	orrs	r3, r1
 8001b1a:	491b      	ldr	r1, [pc, #108]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b20:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b26:	f7ff fac3 	bl	80010b0 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2e:	f7ff fabf 	bl	80010b0 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e03d      	b.n	8001bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0f0      	beq.n	8001b2e <HAL_RCC_OscConfig+0x46a>
 8001b4c:	e035      	b.n	8001bba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <HAL_RCC_OscConfig+0x4cc>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7ff faac 	bl	80010b0 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5c:	f7ff faa8 	bl	80010b0 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e026      	b.n	8001bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_RCC_OscConfig+0x4c4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0x498>
 8001b7a:	e01e      	b.n	8001bba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d107      	bne.n	8001b94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e019      	b.n	8001bbc <HAL_RCC_OscConfig+0x4f8>
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40007000 	.word	0x40007000
 8001b90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_RCC_OscConfig+0x500>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d106      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d001      	beq.n	8001bba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40021000 	.word	0x40021000

08001bc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0d0      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bdc:	4b6a      	ldr	r3, [pc, #424]	; (8001d88 <HAL_RCC_ClockConfig+0x1c0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d910      	bls.n	8001c0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bea:	4b67      	ldr	r3, [pc, #412]	; (8001d88 <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 0207 	bic.w	r2, r3, #7
 8001bf2:	4965      	ldr	r1, [pc, #404]	; (8001d88 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfa:	4b63      	ldr	r3, [pc, #396]	; (8001d88 <HAL_RCC_ClockConfig+0x1c0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0b8      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d020      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c24:	4b59      	ldr	r3, [pc, #356]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	4a58      	ldr	r2, [pc, #352]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c3c:	4b53      	ldr	r3, [pc, #332]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	4a52      	ldr	r2, [pc, #328]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c48:	4b50      	ldr	r3, [pc, #320]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	494d      	ldr	r1, [pc, #308]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d040      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d107      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6e:	4b47      	ldr	r3, [pc, #284]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d115      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e07f      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d107      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c86:	4b41      	ldr	r3, [pc, #260]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d109      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e073      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c96:	4b3d      	ldr	r3, [pc, #244]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e06b      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ca6:	4b39      	ldr	r3, [pc, #228]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f023 0203 	bic.w	r2, r3, #3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4936      	ldr	r1, [pc, #216]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cb8:	f7ff f9fa 	bl	80010b0 <HAL_GetTick>
 8001cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc0:	f7ff f9f6 	bl	80010b0 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e053      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd6:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 020c 	and.w	r2, r3, #12
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d1eb      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce8:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <HAL_RCC_ClockConfig+0x1c0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d210      	bcs.n	8001d18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf6:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 0207 	bic.w	r2, r3, #7
 8001cfe:	4922      	ldr	r1, [pc, #136]	; (8001d88 <HAL_RCC_ClockConfig+0x1c0>)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d06:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <HAL_RCC_ClockConfig+0x1c0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d001      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e032      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d008      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d24:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	4916      	ldr	r1, [pc, #88]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d009      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	490e      	ldr	r1, [pc, #56]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d56:	f000 f821 	bl	8001d9c <HAL_RCC_GetSysClockFreq>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	490a      	ldr	r1, [pc, #40]	; (8001d90 <HAL_RCC_ClockConfig+0x1c8>)
 8001d68:	5ccb      	ldrb	r3, [r1, r3]
 8001d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6e:	4a09      	ldr	r2, [pc, #36]	; (8001d94 <HAL_RCC_ClockConfig+0x1cc>)
 8001d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_RCC_ClockConfig+0x1d0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff f958 	bl	800102c <HAL_InitTick>

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40022000 	.word	0x40022000
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	08003e60 	.word	0x08003e60
 8001d94:	2000000c 	.word	0x2000000c
 8001d98:	20000010 	.word	0x20000010

08001d9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b087      	sub	sp, #28
 8001da0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	2300      	movs	r3, #0
 8001db0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001db6:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x94>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d002      	beq.n	8001dcc <HAL_RCC_GetSysClockFreq+0x30>
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d003      	beq.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x36>
 8001dca:	e027      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dce:	613b      	str	r3, [r7, #16]
      break;
 8001dd0:	e027      	b.n	8001e22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	0c9b      	lsrs	r3, r3, #18
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	4a17      	ldr	r2, [pc, #92]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ddc:	5cd3      	ldrb	r3, [r2, r3]
 8001dde:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d010      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	0c5b      	lsrs	r3, r3, #17
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	4a11      	ldr	r2, [pc, #68]	; (8001e3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001df6:	5cd3      	ldrb	r3, [r2, r3]
 8001df8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a0d      	ldr	r2, [pc, #52]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dfe:	fb03 f202 	mul.w	r2, r3, r2
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	e004      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a0c      	ldr	r2, [pc, #48]	; (8001e40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e10:	fb02 f303 	mul.w	r3, r2, r3
 8001e14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	613b      	str	r3, [r7, #16]
      break;
 8001e1a:	e002      	b.n	8001e22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e1e:	613b      	str	r3, [r7, #16]
      break;
 8001e20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e22:	693b      	ldr	r3, [r7, #16]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000
 8001e34:	007a1200 	.word	0x007a1200
 8001e38:	08003e78 	.word	0x08003e78
 8001e3c:	08003e88 	.word	0x08003e88
 8001e40:	003d0900 	.word	0x003d0900

08001e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e48:	4b02      	ldr	r3, [pc, #8]	; (8001e54 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	2000000c 	.word	0x2000000c

08001e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e5c:	f7ff fff2 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e60:	4602      	mov	r2, r0
 8001e62:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	4903      	ldr	r1, [pc, #12]	; (8001e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e6e:	5ccb      	ldrb	r3, [r1, r3]
 8001e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	08003e70 	.word	0x08003e70

08001e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e84:	f7ff ffde 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	0adb      	lsrs	r3, r3, #11
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	4903      	ldr	r1, [pc, #12]	; (8001ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e96:	5ccb      	ldrb	r3, [r1, r3]
 8001e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	08003e70 	.word	0x08003e70

08001ea8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <RCC_Delay+0x34>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <RCC_Delay+0x38>)
 8001eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eba:	0a5b      	lsrs	r3, r3, #9
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	fb02 f303 	mul.w	r3, r2, r3
 8001ec2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ec4:	bf00      	nop
  }
  while (Delay --);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1e5a      	subs	r2, r3, #1
 8001eca:	60fa      	str	r2, [r7, #12]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1f9      	bne.n	8001ec4 <RCC_Delay+0x1c>
}
 8001ed0:	bf00      	nop
 8001ed2:	bf00      	nop
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr
 8001edc:	2000000c 	.word	0x2000000c
 8001ee0:	10624dd3 	.word	0x10624dd3

08001ee4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e076      	b.n	8001fe4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d108      	bne.n	8001f10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f06:	d009      	beq.n	8001f1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	61da      	str	r2, [r3, #28]
 8001f0e:	e005      	b.n	8001f1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d106      	bne.n	8001f3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fe26 	bl	8000b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa0:	ea42 0103 	orr.w	r1, r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	0c1a      	lsrs	r2, r3, #16
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f002 0204 	and.w	r2, r2, #4
 8001fc2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	69da      	ldr	r2, [r3, #28]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fd2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_SPI_Transmit+0x22>
 800200a:	2302      	movs	r3, #2
 800200c:	e12d      	b.n	800226a <HAL_SPI_Transmit+0x27e>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002016:	f7ff f84b 	bl	80010b0 <HAL_GetTick>
 800201a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b01      	cmp	r3, #1
 800202a:	d002      	beq.n	8002032 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800202c:	2302      	movs	r3, #2
 800202e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002030:	e116      	b.n	8002260 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <HAL_SPI_Transmit+0x52>
 8002038:	88fb      	ldrh	r3, [r7, #6]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d102      	bne.n	8002044 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002042:	e10d      	b.n	8002260 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2203      	movs	r2, #3
 8002048:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	88fa      	ldrh	r2, [r7, #6]
 800205c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	88fa      	ldrh	r2, [r7, #6]
 8002062:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800208a:	d10f      	bne.n	80020ac <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800209a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b6:	2b40      	cmp	r3, #64	; 0x40
 80020b8:	d007      	beq.n	80020ca <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020d2:	d14f      	bne.n	8002174 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <HAL_SPI_Transmit+0xf6>
 80020dc:	8afb      	ldrh	r3, [r7, #22]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d142      	bne.n	8002168 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	881a      	ldrh	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	1c9a      	adds	r2, r3, #2
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002106:	e02f      	b.n	8002168 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b02      	cmp	r3, #2
 8002114:	d112      	bne.n	800213c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	881a      	ldrh	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	1c9a      	adds	r2, r3, #2
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002130:	b29b      	uxth	r3, r3
 8002132:	3b01      	subs	r3, #1
 8002134:	b29a      	uxth	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	86da      	strh	r2, [r3, #54]	; 0x36
 800213a:	e015      	b.n	8002168 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800213c:	f7fe ffb8 	bl	80010b0 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d803      	bhi.n	8002154 <HAL_SPI_Transmit+0x168>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002152:	d102      	bne.n	800215a <HAL_SPI_Transmit+0x16e>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d106      	bne.n	8002168 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002166:	e07b      	b.n	8002260 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800216c:	b29b      	uxth	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1ca      	bne.n	8002108 <HAL_SPI_Transmit+0x11c>
 8002172:	e050      	b.n	8002216 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <HAL_SPI_Transmit+0x196>
 800217c:	8afb      	ldrh	r3, [r7, #22]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d144      	bne.n	800220c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	330c      	adds	r3, #12
 800218c:	7812      	ldrb	r2, [r2, #0]
 800218e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80021a8:	e030      	b.n	800220c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d113      	bne.n	80021e0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	330c      	adds	r3, #12
 80021c2:	7812      	ldrb	r2, [r2, #0]
 80021c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b29a      	uxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80021de:	e015      	b.n	800220c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021e0:	f7fe ff66 	bl	80010b0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d803      	bhi.n	80021f8 <HAL_SPI_Transmit+0x20c>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f6:	d102      	bne.n	80021fe <HAL_SPI_Transmit+0x212>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d106      	bne.n	800220c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800220a:	e029      	b.n	8002260 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002210:	b29b      	uxth	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1c9      	bne.n	80021aa <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	6839      	ldr	r1, [r7, #0]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fbcc 	bl	80029b8 <SPI_EndRxTxTransaction>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2220      	movs	r2, #32
 800222a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10a      	bne.n	800224a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002234:	2300      	movs	r3, #0
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	77fb      	strb	r3, [r7, #31]
 8002256:	e003      	b.n	8002260 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002268:	7ffb      	ldrb	r3, [r7, #31]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3720      	adds	r7, #32
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b088      	sub	sp, #32
 8002276:	af02      	add	r7, sp, #8
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	603b      	str	r3, [r7, #0]
 800227e:	4613      	mov	r3, r2
 8002280:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b01      	cmp	r3, #1
 8002290:	d002      	beq.n	8002298 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002292:	2302      	movs	r3, #2
 8002294:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002296:	e0fb      	b.n	8002490 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022a0:	d112      	bne.n	80022c8 <HAL_SPI_Receive+0x56>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10e      	bne.n	80022c8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2204      	movs	r2, #4
 80022ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80022b2:	88fa      	ldrh	r2, [r7, #6]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	4613      	mov	r3, r2
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f8ef 	bl	80024a2 <HAL_SPI_TransmitReceive>
 80022c4:	4603      	mov	r3, r0
 80022c6:	e0e8      	b.n	800249a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_SPI_Receive+0x64>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e0e1      	b.n	800249a <HAL_SPI_Receive+0x228>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022de:	f7fe fee7 	bl	80010b0 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <HAL_SPI_Receive+0x7e>
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d102      	bne.n	80022f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022f4:	e0cc      	b.n	8002490 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2204      	movs	r2, #4
 80022fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	88fa      	ldrh	r2, [r7, #6]
 800230e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	88fa      	ldrh	r2, [r7, #6]
 8002314:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800233c:	d10f      	bne.n	800235e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800234c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800235c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002368:	2b40      	cmp	r3, #64	; 0x40
 800236a:	d007      	beq.n	800237c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800237a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d16a      	bne.n	800245a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002384:	e032      	b.n	80023ec <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b01      	cmp	r3, #1
 8002392:	d115      	bne.n	80023c0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f103 020c 	add.w	r2, r3, #12
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a0:	7812      	ldrb	r2, [r2, #0]
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023be:	e015      	b.n	80023ec <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023c0:	f7fe fe76 	bl	80010b0 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d803      	bhi.n	80023d8 <HAL_SPI_Receive+0x166>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d6:	d102      	bne.n	80023de <HAL_SPI_Receive+0x16c>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d106      	bne.n	80023ec <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80023ea:	e051      	b.n	8002490 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1c7      	bne.n	8002386 <HAL_SPI_Receive+0x114>
 80023f6:	e035      	b.n	8002464 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b01      	cmp	r3, #1
 8002404:	d113      	bne.n	800242e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002410:	b292      	uxth	r2, r2
 8002412:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002418:	1c9a      	adds	r2, r3, #2
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002422:	b29b      	uxth	r3, r3
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800242c:	e015      	b.n	800245a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800242e:	f7fe fe3f 	bl	80010b0 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d803      	bhi.n	8002446 <HAL_SPI_Receive+0x1d4>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	d102      	bne.n	800244c <HAL_SPI_Receive+0x1da>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d106      	bne.n	800245a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002458:	e01a      	b.n	8002490 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800245e:	b29b      	uxth	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1c9      	bne.n	80023f8 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	6839      	ldr	r1, [r7, #0]
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 fa53 	bl	8002914 <SPI_EndRxTransaction>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	75fb      	strb	r3, [r7, #23]
 8002486:	e003      	b.n	8002490 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002498:	7dfb      	ldrb	r3, [r7, #23]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b08c      	sub	sp, #48	; 0x30
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80024b0:	2301      	movs	r3, #1
 80024b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <HAL_SPI_TransmitReceive+0x26>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e198      	b.n	80027fa <HAL_SPI_TransmitReceive+0x358>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024d0:	f7fe fdee 	bl	80010b0 <HAL_GetTick>
 80024d4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80024e6:	887b      	ldrh	r3, [r7, #2]
 80024e8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d00f      	beq.n	8002512 <HAL_SPI_TransmitReceive+0x70>
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024f8:	d107      	bne.n	800250a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d103      	bne.n	800250a <HAL_SPI_TransmitReceive+0x68>
 8002502:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002506:	2b04      	cmp	r3, #4
 8002508:	d003      	beq.n	8002512 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800250a:	2302      	movs	r3, #2
 800250c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002510:	e16d      	b.n	80027ee <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_SPI_TransmitReceive+0x82>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <HAL_SPI_TransmitReceive+0x82>
 800251e:	887b      	ldrh	r3, [r7, #2]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d103      	bne.n	800252c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800252a:	e160      	b.n	80027ee <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b04      	cmp	r3, #4
 8002536:	d003      	beq.n	8002540 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2205      	movs	r2, #5
 800253c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	887a      	ldrh	r2, [r7, #2]
 8002550:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	887a      	ldrh	r2, [r7, #2]
 8002556:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	887a      	ldrh	r2, [r7, #2]
 8002562:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002580:	2b40      	cmp	r3, #64	; 0x40
 8002582:	d007      	beq.n	8002594 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002592:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800259c:	d17c      	bne.n	8002698 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <HAL_SPI_TransmitReceive+0x10a>
 80025a6:	8b7b      	ldrh	r3, [r7, #26]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d16a      	bne.n	8002682 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	881a      	ldrh	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	1c9a      	adds	r2, r3, #2
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025d0:	e057      	b.n	8002682 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d11b      	bne.n	8002618 <HAL_SPI_TransmitReceive+0x176>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d016      	beq.n	8002618 <HAL_SPI_TransmitReceive+0x176>
 80025ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d113      	bne.n	8002618 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	881a      	ldrh	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	1c9a      	adds	r2, r3, #2
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b01      	cmp	r3, #1
 8002624:	d119      	bne.n	800265a <HAL_SPI_TransmitReceive+0x1b8>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800262a:	b29b      	uxth	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d014      	beq.n	800265a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263a:	b292      	uxth	r2, r2
 800263c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002642:	1c9a      	adds	r2, r3, #2
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800264c:	b29b      	uxth	r3, r3
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002656:	2301      	movs	r3, #1
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800265a:	f7fe fd29 	bl	80010b0 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002666:	429a      	cmp	r2, r3
 8002668:	d80b      	bhi.n	8002682 <HAL_SPI_TransmitReceive+0x1e0>
 800266a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002670:	d007      	beq.n	8002682 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002680:	e0b5      	b.n	80027ee <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002686:	b29b      	uxth	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1a2      	bne.n	80025d2 <HAL_SPI_TransmitReceive+0x130>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d19d      	bne.n	80025d2 <HAL_SPI_TransmitReceive+0x130>
 8002696:	e080      	b.n	800279a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <HAL_SPI_TransmitReceive+0x204>
 80026a0:	8b7b      	ldrh	r3, [r7, #26]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d16f      	bne.n	8002786 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	330c      	adds	r3, #12
 80026b0:	7812      	ldrb	r2, [r2, #0]
 80026b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026cc:	e05b      	b.n	8002786 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d11c      	bne.n	8002716 <HAL_SPI_TransmitReceive+0x274>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d017      	beq.n	8002716 <HAL_SPI_TransmitReceive+0x274>
 80026e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d114      	bne.n	8002716 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	330c      	adds	r3, #12
 80026f6:	7812      	ldrb	r2, [r2, #0]
 80026f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b01      	cmp	r3, #1
 8002722:	d119      	bne.n	8002758 <HAL_SPI_TransmitReceive+0x2b6>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002728:	b29b      	uxth	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d014      	beq.n	8002758 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800274a:	b29b      	uxth	r3, r3
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002754:	2301      	movs	r3, #1
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002758:	f7fe fcaa 	bl	80010b0 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002764:	429a      	cmp	r2, r3
 8002766:	d803      	bhi.n	8002770 <HAL_SPI_TransmitReceive+0x2ce>
 8002768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276e:	d102      	bne.n	8002776 <HAL_SPI_TransmitReceive+0x2d4>
 8002770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002772:	2b00      	cmp	r3, #0
 8002774:	d107      	bne.n	8002786 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002784:	e033      	b.n	80027ee <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800278a:	b29b      	uxth	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d19e      	bne.n	80026ce <HAL_SPI_TransmitReceive+0x22c>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d199      	bne.n	80026ce <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800279a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f90a 	bl	80029b8 <SPI_EndRxTxTransaction>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d006      	beq.n	80027b8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80027b6:	e01a      	b.n	80027ee <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10a      	bne.n	80027d6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027e4:	e003      	b.n	80027ee <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3730      	adds	r7, #48	; 0x30
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	4613      	mov	r3, r2
 8002812:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002814:	f7fe fc4c 	bl	80010b0 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	4413      	add	r3, r2
 8002822:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002824:	f7fe fc44 	bl	80010b0 <HAL_GetTick>
 8002828:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800282a:	4b39      	ldr	r3, [pc, #228]	; (8002910 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	015b      	lsls	r3, r3, #5
 8002830:	0d1b      	lsrs	r3, r3, #20
 8002832:	69fa      	ldr	r2, [r7, #28]
 8002834:	fb02 f303 	mul.w	r3, r2, r3
 8002838:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800283a:	e054      	b.n	80028e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002842:	d050      	beq.n	80028e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002844:	f7fe fc34 	bl	80010b0 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	429a      	cmp	r2, r3
 8002852:	d902      	bls.n	800285a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d13d      	bne.n	80028d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002868:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002872:	d111      	bne.n	8002898 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800287c:	d004      	beq.n	8002888 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002886:	d107      	bne.n	8002898 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002896:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028a0:	d10f      	bne.n	80028c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e017      	b.n	8002906 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4013      	ands	r3, r2
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	bf0c      	ite	eq
 80028f6:	2301      	moveq	r3, #1
 80028f8:	2300      	movne	r3, #0
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	429a      	cmp	r2, r3
 8002902:	d19b      	bne.n	800283c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3720      	adds	r7, #32
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	2000000c 	.word	0x2000000c

08002914 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af02      	add	r7, sp, #8
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002928:	d111      	bne.n	800294e <SPI_EndRxTransaction+0x3a>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002932:	d004      	beq.n	800293e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800293c:	d107      	bne.n	800294e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800294c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002956:	d117      	bne.n	8002988 <SPI_EndRxTransaction+0x74>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002960:	d112      	bne.n	8002988 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2200      	movs	r2, #0
 800296a:	2101      	movs	r1, #1
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f7ff ff49 	bl	8002804 <SPI_WaitFlagStateUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01a      	beq.n	80029ae <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297c:	f043 0220 	orr.w	r2, r3, #32
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e013      	b.n	80029b0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2200      	movs	r2, #0
 8002990:	2180      	movs	r1, #128	; 0x80
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f7ff ff36 	bl	8002804 <SPI_WaitFlagStateUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d007      	beq.n	80029ae <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a2:	f043 0220 	orr.w	r2, r3, #32
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e000      	b.n	80029b0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2200      	movs	r2, #0
 80029cc:	2180      	movs	r1, #128	; 0x80
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f7ff ff18 	bl	8002804 <SPI_WaitFlagStateUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d007      	beq.n	80029ea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029de:	f043 0220 	orr.w	r2, r3, #32
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e000      	b.n	80029ec <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e041      	b.n	8002a8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7fe fa16 	bl	8000e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	4619      	mov	r1, r3
 8002a32:	4610      	mov	r0, r2
 8002a34:	f000 fa20 	bl	8002e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d122      	bne.n	8002aee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d11b      	bne.n	8002aee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f06f 0202 	mvn.w	r2, #2
 8002abe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f9b4 	bl	8002e42 <HAL_TIM_IC_CaptureCallback>
 8002ada:	e005      	b.n	8002ae8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f9a7 	bl	8002e30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f9b6 	bl	8002e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d122      	bne.n	8002b42 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d11b      	bne.n	8002b42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f06f 0204 	mvn.w	r2, #4
 8002b12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f98a 	bl	8002e42 <HAL_TIM_IC_CaptureCallback>
 8002b2e:	e005      	b.n	8002b3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f97d 	bl	8002e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f98c 	bl	8002e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d122      	bne.n	8002b96 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d11b      	bne.n	8002b96 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f06f 0208 	mvn.w	r2, #8
 8002b66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2204      	movs	r2, #4
 8002b6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f960 	bl	8002e42 <HAL_TIM_IC_CaptureCallback>
 8002b82:	e005      	b.n	8002b90 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f953 	bl	8002e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f962 	bl	8002e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	2b10      	cmp	r3, #16
 8002ba2:	d122      	bne.n	8002bea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	2b10      	cmp	r3, #16
 8002bb0:	d11b      	bne.n	8002bea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f06f 0210 	mvn.w	r2, #16
 8002bba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2208      	movs	r2, #8
 8002bc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f936 	bl	8002e42 <HAL_TIM_IC_CaptureCallback>
 8002bd6:	e005      	b.n	8002be4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f929 	bl	8002e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f938 	bl	8002e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d10e      	bne.n	8002c16 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d107      	bne.n	8002c16 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f06f 0201 	mvn.w	r2, #1
 8002c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7fd fc2c 	bl	800046e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c20:	2b80      	cmp	r3, #128	; 0x80
 8002c22:	d10e      	bne.n	8002c42 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2e:	2b80      	cmp	r3, #128	; 0x80
 8002c30:	d107      	bne.n	8002c42 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 fa7a 	bl	8003136 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4c:	2b40      	cmp	r3, #64	; 0x40
 8002c4e:	d10e      	bne.n	8002c6e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5a:	2b40      	cmp	r3, #64	; 0x40
 8002c5c:	d107      	bne.n	8002c6e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f8fc 	bl	8002e66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	f003 0320 	and.w	r3, r3, #32
 8002c78:	2b20      	cmp	r3, #32
 8002c7a:	d10e      	bne.n	8002c9a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b20      	cmp	r3, #32
 8002c88:	d107      	bne.n	8002c9a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f06f 0220 	mvn.w	r2, #32
 8002c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 fa45 	bl	8003124 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_TIM_ConfigClockSource+0x1c>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e0b4      	b.n	8002e28 <HAL_TIM_ConfigClockSource+0x186>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cdc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ce4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf6:	d03e      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0xd4>
 8002cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cfc:	f200 8087 	bhi.w	8002e0e <HAL_TIM_ConfigClockSource+0x16c>
 8002d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d04:	f000 8086 	beq.w	8002e14 <HAL_TIM_ConfigClockSource+0x172>
 8002d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d0c:	d87f      	bhi.n	8002e0e <HAL_TIM_ConfigClockSource+0x16c>
 8002d0e:	2b70      	cmp	r3, #112	; 0x70
 8002d10:	d01a      	beq.n	8002d48 <HAL_TIM_ConfigClockSource+0xa6>
 8002d12:	2b70      	cmp	r3, #112	; 0x70
 8002d14:	d87b      	bhi.n	8002e0e <HAL_TIM_ConfigClockSource+0x16c>
 8002d16:	2b60      	cmp	r3, #96	; 0x60
 8002d18:	d050      	beq.n	8002dbc <HAL_TIM_ConfigClockSource+0x11a>
 8002d1a:	2b60      	cmp	r3, #96	; 0x60
 8002d1c:	d877      	bhi.n	8002e0e <HAL_TIM_ConfigClockSource+0x16c>
 8002d1e:	2b50      	cmp	r3, #80	; 0x50
 8002d20:	d03c      	beq.n	8002d9c <HAL_TIM_ConfigClockSource+0xfa>
 8002d22:	2b50      	cmp	r3, #80	; 0x50
 8002d24:	d873      	bhi.n	8002e0e <HAL_TIM_ConfigClockSource+0x16c>
 8002d26:	2b40      	cmp	r3, #64	; 0x40
 8002d28:	d058      	beq.n	8002ddc <HAL_TIM_ConfigClockSource+0x13a>
 8002d2a:	2b40      	cmp	r3, #64	; 0x40
 8002d2c:	d86f      	bhi.n	8002e0e <HAL_TIM_ConfigClockSource+0x16c>
 8002d2e:	2b30      	cmp	r3, #48	; 0x30
 8002d30:	d064      	beq.n	8002dfc <HAL_TIM_ConfigClockSource+0x15a>
 8002d32:	2b30      	cmp	r3, #48	; 0x30
 8002d34:	d86b      	bhi.n	8002e0e <HAL_TIM_ConfigClockSource+0x16c>
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	d060      	beq.n	8002dfc <HAL_TIM_ConfigClockSource+0x15a>
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	d867      	bhi.n	8002e0e <HAL_TIM_ConfigClockSource+0x16c>
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d05c      	beq.n	8002dfc <HAL_TIM_ConfigClockSource+0x15a>
 8002d42:	2b10      	cmp	r3, #16
 8002d44:	d05a      	beq.n	8002dfc <HAL_TIM_ConfigClockSource+0x15a>
 8002d46:	e062      	b.n	8002e0e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6818      	ldr	r0, [r3, #0]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	6899      	ldr	r1, [r3, #8]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f000 f967 	bl	800302a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d6a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	609a      	str	r2, [r3, #8]
      break;
 8002d74:	e04f      	b.n	8002e16 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6899      	ldr	r1, [r3, #8]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f000 f950 	bl	800302a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d98:	609a      	str	r2, [r3, #8]
      break;
 8002d9a:	e03c      	b.n	8002e16 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	6859      	ldr	r1, [r3, #4]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	461a      	mov	r2, r3
 8002daa:	f000 f8c7 	bl	8002f3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2150      	movs	r1, #80	; 0x50
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 f91e 	bl	8002ff6 <TIM_ITRx_SetConfig>
      break;
 8002dba:	e02c      	b.n	8002e16 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f000 f8e5 	bl	8002f98 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2160      	movs	r1, #96	; 0x60
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 f90e 	bl	8002ff6 <TIM_ITRx_SetConfig>
      break;
 8002dda:	e01c      	b.n	8002e16 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	6859      	ldr	r1, [r3, #4]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	461a      	mov	r2, r3
 8002dea:	f000 f8a7 	bl	8002f3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2140      	movs	r1, #64	; 0x40
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 f8fe 	bl	8002ff6 <TIM_ITRx_SetConfig>
      break;
 8002dfa:	e00c      	b.n	8002e16 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4619      	mov	r1, r3
 8002e06:	4610      	mov	r0, r2
 8002e08:	f000 f8f5 	bl	8002ff6 <TIM_ITRx_SetConfig>
      break;
 8002e0c:	e003      	b.n	8002e16 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	73fb      	strb	r3, [r7, #15]
      break;
 8002e12:	e000      	b.n	8002e16 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bc80      	pop	{r7}
 8002e40:	4770      	bx	lr

08002e42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr

08002e54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr

08002e66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a29      	ldr	r2, [pc, #164]	; (8002f30 <TIM_Base_SetConfig+0xb8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00b      	beq.n	8002ea8 <TIM_Base_SetConfig+0x30>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e96:	d007      	beq.n	8002ea8 <TIM_Base_SetConfig+0x30>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a26      	ldr	r2, [pc, #152]	; (8002f34 <TIM_Base_SetConfig+0xbc>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d003      	beq.n	8002ea8 <TIM_Base_SetConfig+0x30>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a25      	ldr	r2, [pc, #148]	; (8002f38 <TIM_Base_SetConfig+0xc0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d108      	bne.n	8002eba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a1c      	ldr	r2, [pc, #112]	; (8002f30 <TIM_Base_SetConfig+0xb8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00b      	beq.n	8002eda <TIM_Base_SetConfig+0x62>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec8:	d007      	beq.n	8002eda <TIM_Base_SetConfig+0x62>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a19      	ldr	r2, [pc, #100]	; (8002f34 <TIM_Base_SetConfig+0xbc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d003      	beq.n	8002eda <TIM_Base_SetConfig+0x62>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a18      	ldr	r2, [pc, #96]	; (8002f38 <TIM_Base_SetConfig+0xc0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d108      	bne.n	8002eec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a07      	ldr	r2, [pc, #28]	; (8002f30 <TIM_Base_SetConfig+0xb8>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d103      	bne.n	8002f20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	615a      	str	r2, [r3, #20]
}
 8002f26:	bf00      	nop
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr
 8002f30:	40012c00 	.word	0x40012c00
 8002f34:	40000400 	.word	0x40000400
 8002f38:	40000800 	.word	0x40000800

08002f3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	f023 0201 	bic.w	r2, r3, #1
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f023 030a 	bic.w	r3, r3, #10
 8002f78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	621a      	str	r2, [r3, #32]
}
 8002f8e:	bf00      	nop
 8002f90:	371c      	adds	r7, #28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr

08002f98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	f023 0210 	bic.w	r2, r3, #16
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	031b      	lsls	r3, r3, #12
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	621a      	str	r2, [r3, #32]
}
 8002fec:	bf00      	nop
 8002fee:	371c      	adds	r7, #28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b085      	sub	sp, #20
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
 8002ffe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	f043 0307 	orr.w	r3, r3, #7
 8003018:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	609a      	str	r2, [r3, #8]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr

0800302a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800302a:	b480      	push	{r7}
 800302c:	b087      	sub	sp, #28
 800302e:	af00      	add	r7, sp, #0
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003044:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	021a      	lsls	r2, r3, #8
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	431a      	orrs	r2, r3
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	4313      	orrs	r3, r2
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	609a      	str	r2, [r3, #8]
}
 800305e:	bf00      	nop
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800307c:	2302      	movs	r3, #2
 800307e:	e046      	b.n	800310e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a16      	ldr	r2, [pc, #88]	; (8003118 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00e      	beq.n	80030e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030cc:	d009      	beq.n	80030e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a12      	ldr	r2, [pc, #72]	; (800311c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d004      	beq.n	80030e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a10      	ldr	r2, [pc, #64]	; (8003120 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d10c      	bne.n	80030fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr
 8003118:	40012c00 	.word	0x40012c00
 800311c:	40000400 	.word	0x40000400
 8003120:	40000800 	.word	0x40000800

08003124 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr

08003136 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr

08003148 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e042      	b.n	80031e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fd fed4 	bl	8000f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2224      	movs	r2, #36	; 0x24
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800318a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f91d 	bl	80033cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08a      	sub	sp, #40	; 0x28
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	603b      	str	r3, [r7, #0]
 80031f4:	4613      	mov	r3, r2
 80031f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b20      	cmp	r3, #32
 8003206:	d16d      	bne.n	80032e4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <HAL_UART_Transmit+0x2c>
 800320e:	88fb      	ldrh	r3, [r7, #6]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e066      	b.n	80032e6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2221      	movs	r2, #33	; 0x21
 8003222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003226:	f7fd ff43 	bl	80010b0 <HAL_GetTick>
 800322a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	88fa      	ldrh	r2, [r7, #6]
 8003230:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	88fa      	ldrh	r2, [r7, #6]
 8003236:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003240:	d108      	bne.n	8003254 <HAL_UART_Transmit+0x6c>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d104      	bne.n	8003254 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	61bb      	str	r3, [r7, #24]
 8003252:	e003      	b.n	800325c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003258:	2300      	movs	r3, #0
 800325a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800325c:	e02a      	b.n	80032b4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2200      	movs	r2, #0
 8003266:	2180      	movs	r1, #128	; 0x80
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 f840 	bl	80032ee <UART_WaitOnFlagUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e036      	b.n	80032e6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10b      	bne.n	8003296 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800328c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	3302      	adds	r3, #2
 8003292:	61bb      	str	r3, [r7, #24]
 8003294:	e007      	b.n	80032a6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	781a      	ldrb	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	3301      	adds	r3, #1
 80032a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1cf      	bne.n	800325e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2200      	movs	r2, #0
 80032c6:	2140      	movs	r1, #64	; 0x40
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 f810 	bl	80032ee <UART_WaitOnFlagUntilTimeout>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e006      	b.n	80032e6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	e000      	b.n	80032e6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80032e4:	2302      	movs	r3, #2
  }
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3720      	adds	r7, #32
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b090      	sub	sp, #64	; 0x40
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	603b      	str	r3, [r7, #0]
 80032fa:	4613      	mov	r3, r2
 80032fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032fe:	e050      	b.n	80033a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003306:	d04c      	beq.n	80033a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800330a:	2b00      	cmp	r3, #0
 800330c:	d007      	beq.n	800331e <UART_WaitOnFlagUntilTimeout+0x30>
 800330e:	f7fd fecf 	bl	80010b0 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800331a:	429a      	cmp	r2, r3
 800331c:	d241      	bcs.n	80033a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	330c      	adds	r3, #12
 8003324:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003328:	e853 3f00 	ldrex	r3, [r3]
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	330c      	adds	r3, #12
 800333c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800333e:	637a      	str	r2, [r7, #52]	; 0x34
 8003340:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003342:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003346:	e841 2300 	strex	r3, r2, [r1]
 800334a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800334c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1e5      	bne.n	800331e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	3314      	adds	r3, #20
 8003358:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	e853 3f00 	ldrex	r3, [r3]
 8003360:	613b      	str	r3, [r7, #16]
   return(result);
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f023 0301 	bic.w	r3, r3, #1
 8003368:	63bb      	str	r3, [r7, #56]	; 0x38
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3314      	adds	r3, #20
 8003370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003372:	623a      	str	r2, [r7, #32]
 8003374:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003376:	69f9      	ldr	r1, [r7, #28]
 8003378:	6a3a      	ldr	r2, [r7, #32]
 800337a:	e841 2300 	strex	r3, r2, [r1]
 800337e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1e5      	bne.n	8003352 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2220      	movs	r2, #32
 800338a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e00f      	b.n	80033c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4013      	ands	r3, r2
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	bf0c      	ite	eq
 80033b2:	2301      	moveq	r3, #1
 80033b4:	2300      	movne	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	461a      	mov	r2, r3
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d09f      	beq.n	8003300 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3740      	adds	r7, #64	; 0x40
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003406:	f023 030c 	bic.w	r3, r3, #12
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6812      	ldr	r2, [r2, #0]
 800340e:	68b9      	ldr	r1, [r7, #8]
 8003410:	430b      	orrs	r3, r1
 8003412:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699a      	ldr	r2, [r3, #24]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a2c      	ldr	r2, [pc, #176]	; (80034e0 <UART_SetConfig+0x114>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d103      	bne.n	800343c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003434:	f7fe fd24 	bl	8001e80 <HAL_RCC_GetPCLK2Freq>
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	e002      	b.n	8003442 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800343c:	f7fe fd0c 	bl	8001e58 <HAL_RCC_GetPCLK1Freq>
 8003440:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	009a      	lsls	r2, r3, #2
 800344c:	441a      	add	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	fbb2 f3f3 	udiv	r3, r2, r3
 8003458:	4a22      	ldr	r2, [pc, #136]	; (80034e4 <UART_SetConfig+0x118>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	0119      	lsls	r1, r3, #4
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	009a      	lsls	r2, r3, #2
 800346c:	441a      	add	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	fbb2 f2f3 	udiv	r2, r2, r3
 8003478:	4b1a      	ldr	r3, [pc, #104]	; (80034e4 <UART_SetConfig+0x118>)
 800347a:	fba3 0302 	umull	r0, r3, r3, r2
 800347e:	095b      	lsrs	r3, r3, #5
 8003480:	2064      	movs	r0, #100	; 0x64
 8003482:	fb00 f303 	mul.w	r3, r0, r3
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	3332      	adds	r3, #50	; 0x32
 800348c:	4a15      	ldr	r2, [pc, #84]	; (80034e4 <UART_SetConfig+0x118>)
 800348e:	fba2 2303 	umull	r2, r3, r2, r3
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003498:	4419      	add	r1, r3
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	009a      	lsls	r2, r3, #2
 80034a4:	441a      	add	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80034b0:	4b0c      	ldr	r3, [pc, #48]	; (80034e4 <UART_SetConfig+0x118>)
 80034b2:	fba3 0302 	umull	r0, r3, r3, r2
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	2064      	movs	r0, #100	; 0x64
 80034ba:	fb00 f303 	mul.w	r3, r0, r3
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	3332      	adds	r3, #50	; 0x32
 80034c4:	4a07      	ldr	r2, [pc, #28]	; (80034e4 <UART_SetConfig+0x118>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	f003 020f 	and.w	r2, r3, #15
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	440a      	add	r2, r1
 80034d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034d8:	bf00      	nop
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40013800 	.word	0x40013800
 80034e4:	51eb851f 	.word	0x51eb851f

080034e8 <__errno>:
 80034e8:	4b01      	ldr	r3, [pc, #4]	; (80034f0 <__errno+0x8>)
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	20000018 	.word	0x20000018

080034f4 <__libc_init_array>:
 80034f4:	b570      	push	{r4, r5, r6, lr}
 80034f6:	2600      	movs	r6, #0
 80034f8:	4d0c      	ldr	r5, [pc, #48]	; (800352c <__libc_init_array+0x38>)
 80034fa:	4c0d      	ldr	r4, [pc, #52]	; (8003530 <__libc_init_array+0x3c>)
 80034fc:	1b64      	subs	r4, r4, r5
 80034fe:	10a4      	asrs	r4, r4, #2
 8003500:	42a6      	cmp	r6, r4
 8003502:	d109      	bne.n	8003518 <__libc_init_array+0x24>
 8003504:	f000 fc9c 	bl	8003e40 <_init>
 8003508:	2600      	movs	r6, #0
 800350a:	4d0a      	ldr	r5, [pc, #40]	; (8003534 <__libc_init_array+0x40>)
 800350c:	4c0a      	ldr	r4, [pc, #40]	; (8003538 <__libc_init_array+0x44>)
 800350e:	1b64      	subs	r4, r4, r5
 8003510:	10a4      	asrs	r4, r4, #2
 8003512:	42a6      	cmp	r6, r4
 8003514:	d105      	bne.n	8003522 <__libc_init_array+0x2e>
 8003516:	bd70      	pop	{r4, r5, r6, pc}
 8003518:	f855 3b04 	ldr.w	r3, [r5], #4
 800351c:	4798      	blx	r3
 800351e:	3601      	adds	r6, #1
 8003520:	e7ee      	b.n	8003500 <__libc_init_array+0xc>
 8003522:	f855 3b04 	ldr.w	r3, [r5], #4
 8003526:	4798      	blx	r3
 8003528:	3601      	adds	r6, #1
 800352a:	e7f2      	b.n	8003512 <__libc_init_array+0x1e>
 800352c:	08003ec0 	.word	0x08003ec0
 8003530:	08003ec0 	.word	0x08003ec0
 8003534:	08003ec0 	.word	0x08003ec0
 8003538:	08003ec4 	.word	0x08003ec4

0800353c <memset>:
 800353c:	4603      	mov	r3, r0
 800353e:	4402      	add	r2, r0
 8003540:	4293      	cmp	r3, r2
 8003542:	d100      	bne.n	8003546 <memset+0xa>
 8003544:	4770      	bx	lr
 8003546:	f803 1b01 	strb.w	r1, [r3], #1
 800354a:	e7f9      	b.n	8003540 <memset+0x4>

0800354c <siprintf>:
 800354c:	b40e      	push	{r1, r2, r3}
 800354e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003552:	b500      	push	{lr}
 8003554:	b09c      	sub	sp, #112	; 0x70
 8003556:	ab1d      	add	r3, sp, #116	; 0x74
 8003558:	9002      	str	r0, [sp, #8]
 800355a:	9006      	str	r0, [sp, #24]
 800355c:	9107      	str	r1, [sp, #28]
 800355e:	9104      	str	r1, [sp, #16]
 8003560:	4808      	ldr	r0, [pc, #32]	; (8003584 <siprintf+0x38>)
 8003562:	4909      	ldr	r1, [pc, #36]	; (8003588 <siprintf+0x3c>)
 8003564:	f853 2b04 	ldr.w	r2, [r3], #4
 8003568:	9105      	str	r1, [sp, #20]
 800356a:	6800      	ldr	r0, [r0, #0]
 800356c:	a902      	add	r1, sp, #8
 800356e:	9301      	str	r3, [sp, #4]
 8003570:	f000 f868 	bl	8003644 <_svfiprintf_r>
 8003574:	2200      	movs	r2, #0
 8003576:	9b02      	ldr	r3, [sp, #8]
 8003578:	701a      	strb	r2, [r3, #0]
 800357a:	b01c      	add	sp, #112	; 0x70
 800357c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003580:	b003      	add	sp, #12
 8003582:	4770      	bx	lr
 8003584:	20000018 	.word	0x20000018
 8003588:	ffff0208 	.word	0xffff0208

0800358c <__ssputs_r>:
 800358c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003590:	688e      	ldr	r6, [r1, #8]
 8003592:	4682      	mov	sl, r0
 8003594:	429e      	cmp	r6, r3
 8003596:	460c      	mov	r4, r1
 8003598:	4690      	mov	r8, r2
 800359a:	461f      	mov	r7, r3
 800359c:	d838      	bhi.n	8003610 <__ssputs_r+0x84>
 800359e:	898a      	ldrh	r2, [r1, #12]
 80035a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80035a4:	d032      	beq.n	800360c <__ssputs_r+0x80>
 80035a6:	6825      	ldr	r5, [r4, #0]
 80035a8:	6909      	ldr	r1, [r1, #16]
 80035aa:	3301      	adds	r3, #1
 80035ac:	eba5 0901 	sub.w	r9, r5, r1
 80035b0:	6965      	ldr	r5, [r4, #20]
 80035b2:	444b      	add	r3, r9
 80035b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035bc:	106d      	asrs	r5, r5, #1
 80035be:	429d      	cmp	r5, r3
 80035c0:	bf38      	it	cc
 80035c2:	461d      	movcc	r5, r3
 80035c4:	0553      	lsls	r3, r2, #21
 80035c6:	d531      	bpl.n	800362c <__ssputs_r+0xa0>
 80035c8:	4629      	mov	r1, r5
 80035ca:	f000 fb6f 	bl	8003cac <_malloc_r>
 80035ce:	4606      	mov	r6, r0
 80035d0:	b950      	cbnz	r0, 80035e8 <__ssputs_r+0x5c>
 80035d2:	230c      	movs	r3, #12
 80035d4:	f04f 30ff 	mov.w	r0, #4294967295
 80035d8:	f8ca 3000 	str.w	r3, [sl]
 80035dc:	89a3      	ldrh	r3, [r4, #12]
 80035de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035e2:	81a3      	strh	r3, [r4, #12]
 80035e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e8:	464a      	mov	r2, r9
 80035ea:	6921      	ldr	r1, [r4, #16]
 80035ec:	f000 face 	bl	8003b8c <memcpy>
 80035f0:	89a3      	ldrh	r3, [r4, #12]
 80035f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035fa:	81a3      	strh	r3, [r4, #12]
 80035fc:	6126      	str	r6, [r4, #16]
 80035fe:	444e      	add	r6, r9
 8003600:	6026      	str	r6, [r4, #0]
 8003602:	463e      	mov	r6, r7
 8003604:	6165      	str	r5, [r4, #20]
 8003606:	eba5 0509 	sub.w	r5, r5, r9
 800360a:	60a5      	str	r5, [r4, #8]
 800360c:	42be      	cmp	r6, r7
 800360e:	d900      	bls.n	8003612 <__ssputs_r+0x86>
 8003610:	463e      	mov	r6, r7
 8003612:	4632      	mov	r2, r6
 8003614:	4641      	mov	r1, r8
 8003616:	6820      	ldr	r0, [r4, #0]
 8003618:	f000 fac6 	bl	8003ba8 <memmove>
 800361c:	68a3      	ldr	r3, [r4, #8]
 800361e:	2000      	movs	r0, #0
 8003620:	1b9b      	subs	r3, r3, r6
 8003622:	60a3      	str	r3, [r4, #8]
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	4433      	add	r3, r6
 8003628:	6023      	str	r3, [r4, #0]
 800362a:	e7db      	b.n	80035e4 <__ssputs_r+0x58>
 800362c:	462a      	mov	r2, r5
 800362e:	f000 fbb1 	bl	8003d94 <_realloc_r>
 8003632:	4606      	mov	r6, r0
 8003634:	2800      	cmp	r0, #0
 8003636:	d1e1      	bne.n	80035fc <__ssputs_r+0x70>
 8003638:	4650      	mov	r0, sl
 800363a:	6921      	ldr	r1, [r4, #16]
 800363c:	f000 face 	bl	8003bdc <_free_r>
 8003640:	e7c7      	b.n	80035d2 <__ssputs_r+0x46>
	...

08003644 <_svfiprintf_r>:
 8003644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003648:	4698      	mov	r8, r3
 800364a:	898b      	ldrh	r3, [r1, #12]
 800364c:	4607      	mov	r7, r0
 800364e:	061b      	lsls	r3, r3, #24
 8003650:	460d      	mov	r5, r1
 8003652:	4614      	mov	r4, r2
 8003654:	b09d      	sub	sp, #116	; 0x74
 8003656:	d50e      	bpl.n	8003676 <_svfiprintf_r+0x32>
 8003658:	690b      	ldr	r3, [r1, #16]
 800365a:	b963      	cbnz	r3, 8003676 <_svfiprintf_r+0x32>
 800365c:	2140      	movs	r1, #64	; 0x40
 800365e:	f000 fb25 	bl	8003cac <_malloc_r>
 8003662:	6028      	str	r0, [r5, #0]
 8003664:	6128      	str	r0, [r5, #16]
 8003666:	b920      	cbnz	r0, 8003672 <_svfiprintf_r+0x2e>
 8003668:	230c      	movs	r3, #12
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	f04f 30ff 	mov.w	r0, #4294967295
 8003670:	e0d1      	b.n	8003816 <_svfiprintf_r+0x1d2>
 8003672:	2340      	movs	r3, #64	; 0x40
 8003674:	616b      	str	r3, [r5, #20]
 8003676:	2300      	movs	r3, #0
 8003678:	9309      	str	r3, [sp, #36]	; 0x24
 800367a:	2320      	movs	r3, #32
 800367c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003680:	2330      	movs	r3, #48	; 0x30
 8003682:	f04f 0901 	mov.w	r9, #1
 8003686:	f8cd 800c 	str.w	r8, [sp, #12]
 800368a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003830 <_svfiprintf_r+0x1ec>
 800368e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003692:	4623      	mov	r3, r4
 8003694:	469a      	mov	sl, r3
 8003696:	f813 2b01 	ldrb.w	r2, [r3], #1
 800369a:	b10a      	cbz	r2, 80036a0 <_svfiprintf_r+0x5c>
 800369c:	2a25      	cmp	r2, #37	; 0x25
 800369e:	d1f9      	bne.n	8003694 <_svfiprintf_r+0x50>
 80036a0:	ebba 0b04 	subs.w	fp, sl, r4
 80036a4:	d00b      	beq.n	80036be <_svfiprintf_r+0x7a>
 80036a6:	465b      	mov	r3, fp
 80036a8:	4622      	mov	r2, r4
 80036aa:	4629      	mov	r1, r5
 80036ac:	4638      	mov	r0, r7
 80036ae:	f7ff ff6d 	bl	800358c <__ssputs_r>
 80036b2:	3001      	adds	r0, #1
 80036b4:	f000 80aa 	beq.w	800380c <_svfiprintf_r+0x1c8>
 80036b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036ba:	445a      	add	r2, fp
 80036bc:	9209      	str	r2, [sp, #36]	; 0x24
 80036be:	f89a 3000 	ldrb.w	r3, [sl]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 80a2 	beq.w	800380c <_svfiprintf_r+0x1c8>
 80036c8:	2300      	movs	r3, #0
 80036ca:	f04f 32ff 	mov.w	r2, #4294967295
 80036ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036d2:	f10a 0a01 	add.w	sl, sl, #1
 80036d6:	9304      	str	r3, [sp, #16]
 80036d8:	9307      	str	r3, [sp, #28]
 80036da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036de:	931a      	str	r3, [sp, #104]	; 0x68
 80036e0:	4654      	mov	r4, sl
 80036e2:	2205      	movs	r2, #5
 80036e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036e8:	4851      	ldr	r0, [pc, #324]	; (8003830 <_svfiprintf_r+0x1ec>)
 80036ea:	f000 fa41 	bl	8003b70 <memchr>
 80036ee:	9a04      	ldr	r2, [sp, #16]
 80036f0:	b9d8      	cbnz	r0, 800372a <_svfiprintf_r+0xe6>
 80036f2:	06d0      	lsls	r0, r2, #27
 80036f4:	bf44      	itt	mi
 80036f6:	2320      	movmi	r3, #32
 80036f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036fc:	0711      	lsls	r1, r2, #28
 80036fe:	bf44      	itt	mi
 8003700:	232b      	movmi	r3, #43	; 0x2b
 8003702:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003706:	f89a 3000 	ldrb.w	r3, [sl]
 800370a:	2b2a      	cmp	r3, #42	; 0x2a
 800370c:	d015      	beq.n	800373a <_svfiprintf_r+0xf6>
 800370e:	4654      	mov	r4, sl
 8003710:	2000      	movs	r0, #0
 8003712:	f04f 0c0a 	mov.w	ip, #10
 8003716:	9a07      	ldr	r2, [sp, #28]
 8003718:	4621      	mov	r1, r4
 800371a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800371e:	3b30      	subs	r3, #48	; 0x30
 8003720:	2b09      	cmp	r3, #9
 8003722:	d94e      	bls.n	80037c2 <_svfiprintf_r+0x17e>
 8003724:	b1b0      	cbz	r0, 8003754 <_svfiprintf_r+0x110>
 8003726:	9207      	str	r2, [sp, #28]
 8003728:	e014      	b.n	8003754 <_svfiprintf_r+0x110>
 800372a:	eba0 0308 	sub.w	r3, r0, r8
 800372e:	fa09 f303 	lsl.w	r3, r9, r3
 8003732:	4313      	orrs	r3, r2
 8003734:	46a2      	mov	sl, r4
 8003736:	9304      	str	r3, [sp, #16]
 8003738:	e7d2      	b.n	80036e0 <_svfiprintf_r+0x9c>
 800373a:	9b03      	ldr	r3, [sp, #12]
 800373c:	1d19      	adds	r1, r3, #4
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	9103      	str	r1, [sp, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	bfbb      	ittet	lt
 8003746:	425b      	neglt	r3, r3
 8003748:	f042 0202 	orrlt.w	r2, r2, #2
 800374c:	9307      	strge	r3, [sp, #28]
 800374e:	9307      	strlt	r3, [sp, #28]
 8003750:	bfb8      	it	lt
 8003752:	9204      	strlt	r2, [sp, #16]
 8003754:	7823      	ldrb	r3, [r4, #0]
 8003756:	2b2e      	cmp	r3, #46	; 0x2e
 8003758:	d10c      	bne.n	8003774 <_svfiprintf_r+0x130>
 800375a:	7863      	ldrb	r3, [r4, #1]
 800375c:	2b2a      	cmp	r3, #42	; 0x2a
 800375e:	d135      	bne.n	80037cc <_svfiprintf_r+0x188>
 8003760:	9b03      	ldr	r3, [sp, #12]
 8003762:	3402      	adds	r4, #2
 8003764:	1d1a      	adds	r2, r3, #4
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	9203      	str	r2, [sp, #12]
 800376a:	2b00      	cmp	r3, #0
 800376c:	bfb8      	it	lt
 800376e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003772:	9305      	str	r3, [sp, #20]
 8003774:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003834 <_svfiprintf_r+0x1f0>
 8003778:	2203      	movs	r2, #3
 800377a:	4650      	mov	r0, sl
 800377c:	7821      	ldrb	r1, [r4, #0]
 800377e:	f000 f9f7 	bl	8003b70 <memchr>
 8003782:	b140      	cbz	r0, 8003796 <_svfiprintf_r+0x152>
 8003784:	2340      	movs	r3, #64	; 0x40
 8003786:	eba0 000a 	sub.w	r0, r0, sl
 800378a:	fa03 f000 	lsl.w	r0, r3, r0
 800378e:	9b04      	ldr	r3, [sp, #16]
 8003790:	3401      	adds	r4, #1
 8003792:	4303      	orrs	r3, r0
 8003794:	9304      	str	r3, [sp, #16]
 8003796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800379a:	2206      	movs	r2, #6
 800379c:	4826      	ldr	r0, [pc, #152]	; (8003838 <_svfiprintf_r+0x1f4>)
 800379e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037a2:	f000 f9e5 	bl	8003b70 <memchr>
 80037a6:	2800      	cmp	r0, #0
 80037a8:	d038      	beq.n	800381c <_svfiprintf_r+0x1d8>
 80037aa:	4b24      	ldr	r3, [pc, #144]	; (800383c <_svfiprintf_r+0x1f8>)
 80037ac:	bb1b      	cbnz	r3, 80037f6 <_svfiprintf_r+0x1b2>
 80037ae:	9b03      	ldr	r3, [sp, #12]
 80037b0:	3307      	adds	r3, #7
 80037b2:	f023 0307 	bic.w	r3, r3, #7
 80037b6:	3308      	adds	r3, #8
 80037b8:	9303      	str	r3, [sp, #12]
 80037ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037bc:	4433      	add	r3, r6
 80037be:	9309      	str	r3, [sp, #36]	; 0x24
 80037c0:	e767      	b.n	8003692 <_svfiprintf_r+0x4e>
 80037c2:	460c      	mov	r4, r1
 80037c4:	2001      	movs	r0, #1
 80037c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80037ca:	e7a5      	b.n	8003718 <_svfiprintf_r+0xd4>
 80037cc:	2300      	movs	r3, #0
 80037ce:	f04f 0c0a 	mov.w	ip, #10
 80037d2:	4619      	mov	r1, r3
 80037d4:	3401      	adds	r4, #1
 80037d6:	9305      	str	r3, [sp, #20]
 80037d8:	4620      	mov	r0, r4
 80037da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037de:	3a30      	subs	r2, #48	; 0x30
 80037e0:	2a09      	cmp	r2, #9
 80037e2:	d903      	bls.n	80037ec <_svfiprintf_r+0x1a8>
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0c5      	beq.n	8003774 <_svfiprintf_r+0x130>
 80037e8:	9105      	str	r1, [sp, #20]
 80037ea:	e7c3      	b.n	8003774 <_svfiprintf_r+0x130>
 80037ec:	4604      	mov	r4, r0
 80037ee:	2301      	movs	r3, #1
 80037f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80037f4:	e7f0      	b.n	80037d8 <_svfiprintf_r+0x194>
 80037f6:	ab03      	add	r3, sp, #12
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	462a      	mov	r2, r5
 80037fc:	4638      	mov	r0, r7
 80037fe:	4b10      	ldr	r3, [pc, #64]	; (8003840 <_svfiprintf_r+0x1fc>)
 8003800:	a904      	add	r1, sp, #16
 8003802:	f3af 8000 	nop.w
 8003806:	1c42      	adds	r2, r0, #1
 8003808:	4606      	mov	r6, r0
 800380a:	d1d6      	bne.n	80037ba <_svfiprintf_r+0x176>
 800380c:	89ab      	ldrh	r3, [r5, #12]
 800380e:	065b      	lsls	r3, r3, #25
 8003810:	f53f af2c 	bmi.w	800366c <_svfiprintf_r+0x28>
 8003814:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003816:	b01d      	add	sp, #116	; 0x74
 8003818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800381c:	ab03      	add	r3, sp, #12
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	462a      	mov	r2, r5
 8003822:	4638      	mov	r0, r7
 8003824:	4b06      	ldr	r3, [pc, #24]	; (8003840 <_svfiprintf_r+0x1fc>)
 8003826:	a904      	add	r1, sp, #16
 8003828:	f000 f87c 	bl	8003924 <_printf_i>
 800382c:	e7eb      	b.n	8003806 <_svfiprintf_r+0x1c2>
 800382e:	bf00      	nop
 8003830:	08003e8a 	.word	0x08003e8a
 8003834:	08003e90 	.word	0x08003e90
 8003838:	08003e94 	.word	0x08003e94
 800383c:	00000000 	.word	0x00000000
 8003840:	0800358d 	.word	0x0800358d

08003844 <_printf_common>:
 8003844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003848:	4616      	mov	r6, r2
 800384a:	4699      	mov	r9, r3
 800384c:	688a      	ldr	r2, [r1, #8]
 800384e:	690b      	ldr	r3, [r1, #16]
 8003850:	4607      	mov	r7, r0
 8003852:	4293      	cmp	r3, r2
 8003854:	bfb8      	it	lt
 8003856:	4613      	movlt	r3, r2
 8003858:	6033      	str	r3, [r6, #0]
 800385a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800385e:	460c      	mov	r4, r1
 8003860:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003864:	b10a      	cbz	r2, 800386a <_printf_common+0x26>
 8003866:	3301      	adds	r3, #1
 8003868:	6033      	str	r3, [r6, #0]
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	0699      	lsls	r1, r3, #26
 800386e:	bf42      	ittt	mi
 8003870:	6833      	ldrmi	r3, [r6, #0]
 8003872:	3302      	addmi	r3, #2
 8003874:	6033      	strmi	r3, [r6, #0]
 8003876:	6825      	ldr	r5, [r4, #0]
 8003878:	f015 0506 	ands.w	r5, r5, #6
 800387c:	d106      	bne.n	800388c <_printf_common+0x48>
 800387e:	f104 0a19 	add.w	sl, r4, #25
 8003882:	68e3      	ldr	r3, [r4, #12]
 8003884:	6832      	ldr	r2, [r6, #0]
 8003886:	1a9b      	subs	r3, r3, r2
 8003888:	42ab      	cmp	r3, r5
 800388a:	dc28      	bgt.n	80038de <_printf_common+0x9a>
 800388c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003890:	1e13      	subs	r3, r2, #0
 8003892:	6822      	ldr	r2, [r4, #0]
 8003894:	bf18      	it	ne
 8003896:	2301      	movne	r3, #1
 8003898:	0692      	lsls	r2, r2, #26
 800389a:	d42d      	bmi.n	80038f8 <_printf_common+0xb4>
 800389c:	4649      	mov	r1, r9
 800389e:	4638      	mov	r0, r7
 80038a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038a4:	47c0      	blx	r8
 80038a6:	3001      	adds	r0, #1
 80038a8:	d020      	beq.n	80038ec <_printf_common+0xa8>
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	68e5      	ldr	r5, [r4, #12]
 80038ae:	f003 0306 	and.w	r3, r3, #6
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	bf18      	it	ne
 80038b6:	2500      	movne	r5, #0
 80038b8:	6832      	ldr	r2, [r6, #0]
 80038ba:	f04f 0600 	mov.w	r6, #0
 80038be:	68a3      	ldr	r3, [r4, #8]
 80038c0:	bf08      	it	eq
 80038c2:	1aad      	subeq	r5, r5, r2
 80038c4:	6922      	ldr	r2, [r4, #16]
 80038c6:	bf08      	it	eq
 80038c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038cc:	4293      	cmp	r3, r2
 80038ce:	bfc4      	itt	gt
 80038d0:	1a9b      	subgt	r3, r3, r2
 80038d2:	18ed      	addgt	r5, r5, r3
 80038d4:	341a      	adds	r4, #26
 80038d6:	42b5      	cmp	r5, r6
 80038d8:	d11a      	bne.n	8003910 <_printf_common+0xcc>
 80038da:	2000      	movs	r0, #0
 80038dc:	e008      	b.n	80038f0 <_printf_common+0xac>
 80038de:	2301      	movs	r3, #1
 80038e0:	4652      	mov	r2, sl
 80038e2:	4649      	mov	r1, r9
 80038e4:	4638      	mov	r0, r7
 80038e6:	47c0      	blx	r8
 80038e8:	3001      	adds	r0, #1
 80038ea:	d103      	bne.n	80038f4 <_printf_common+0xb0>
 80038ec:	f04f 30ff 	mov.w	r0, #4294967295
 80038f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038f4:	3501      	adds	r5, #1
 80038f6:	e7c4      	b.n	8003882 <_printf_common+0x3e>
 80038f8:	2030      	movs	r0, #48	; 0x30
 80038fa:	18e1      	adds	r1, r4, r3
 80038fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003906:	4422      	add	r2, r4
 8003908:	3302      	adds	r3, #2
 800390a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800390e:	e7c5      	b.n	800389c <_printf_common+0x58>
 8003910:	2301      	movs	r3, #1
 8003912:	4622      	mov	r2, r4
 8003914:	4649      	mov	r1, r9
 8003916:	4638      	mov	r0, r7
 8003918:	47c0      	blx	r8
 800391a:	3001      	adds	r0, #1
 800391c:	d0e6      	beq.n	80038ec <_printf_common+0xa8>
 800391e:	3601      	adds	r6, #1
 8003920:	e7d9      	b.n	80038d6 <_printf_common+0x92>
	...

08003924 <_printf_i>:
 8003924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003928:	7e0f      	ldrb	r7, [r1, #24]
 800392a:	4691      	mov	r9, r2
 800392c:	2f78      	cmp	r7, #120	; 0x78
 800392e:	4680      	mov	r8, r0
 8003930:	460c      	mov	r4, r1
 8003932:	469a      	mov	sl, r3
 8003934:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003936:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800393a:	d807      	bhi.n	800394c <_printf_i+0x28>
 800393c:	2f62      	cmp	r7, #98	; 0x62
 800393e:	d80a      	bhi.n	8003956 <_printf_i+0x32>
 8003940:	2f00      	cmp	r7, #0
 8003942:	f000 80d9 	beq.w	8003af8 <_printf_i+0x1d4>
 8003946:	2f58      	cmp	r7, #88	; 0x58
 8003948:	f000 80a4 	beq.w	8003a94 <_printf_i+0x170>
 800394c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003950:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003954:	e03a      	b.n	80039cc <_printf_i+0xa8>
 8003956:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800395a:	2b15      	cmp	r3, #21
 800395c:	d8f6      	bhi.n	800394c <_printf_i+0x28>
 800395e:	a101      	add	r1, pc, #4	; (adr r1, 8003964 <_printf_i+0x40>)
 8003960:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003964:	080039bd 	.word	0x080039bd
 8003968:	080039d1 	.word	0x080039d1
 800396c:	0800394d 	.word	0x0800394d
 8003970:	0800394d 	.word	0x0800394d
 8003974:	0800394d 	.word	0x0800394d
 8003978:	0800394d 	.word	0x0800394d
 800397c:	080039d1 	.word	0x080039d1
 8003980:	0800394d 	.word	0x0800394d
 8003984:	0800394d 	.word	0x0800394d
 8003988:	0800394d 	.word	0x0800394d
 800398c:	0800394d 	.word	0x0800394d
 8003990:	08003adf 	.word	0x08003adf
 8003994:	08003a01 	.word	0x08003a01
 8003998:	08003ac1 	.word	0x08003ac1
 800399c:	0800394d 	.word	0x0800394d
 80039a0:	0800394d 	.word	0x0800394d
 80039a4:	08003b01 	.word	0x08003b01
 80039a8:	0800394d 	.word	0x0800394d
 80039ac:	08003a01 	.word	0x08003a01
 80039b0:	0800394d 	.word	0x0800394d
 80039b4:	0800394d 	.word	0x0800394d
 80039b8:	08003ac9 	.word	0x08003ac9
 80039bc:	682b      	ldr	r3, [r5, #0]
 80039be:	1d1a      	adds	r2, r3, #4
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	602a      	str	r2, [r5, #0]
 80039c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0a4      	b.n	8003b1a <_printf_i+0x1f6>
 80039d0:	6820      	ldr	r0, [r4, #0]
 80039d2:	6829      	ldr	r1, [r5, #0]
 80039d4:	0606      	lsls	r6, r0, #24
 80039d6:	f101 0304 	add.w	r3, r1, #4
 80039da:	d50a      	bpl.n	80039f2 <_printf_i+0xce>
 80039dc:	680e      	ldr	r6, [r1, #0]
 80039de:	602b      	str	r3, [r5, #0]
 80039e0:	2e00      	cmp	r6, #0
 80039e2:	da03      	bge.n	80039ec <_printf_i+0xc8>
 80039e4:	232d      	movs	r3, #45	; 0x2d
 80039e6:	4276      	negs	r6, r6
 80039e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039ec:	230a      	movs	r3, #10
 80039ee:	485e      	ldr	r0, [pc, #376]	; (8003b68 <_printf_i+0x244>)
 80039f0:	e019      	b.n	8003a26 <_printf_i+0x102>
 80039f2:	680e      	ldr	r6, [r1, #0]
 80039f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039f8:	602b      	str	r3, [r5, #0]
 80039fa:	bf18      	it	ne
 80039fc:	b236      	sxthne	r6, r6
 80039fe:	e7ef      	b.n	80039e0 <_printf_i+0xbc>
 8003a00:	682b      	ldr	r3, [r5, #0]
 8003a02:	6820      	ldr	r0, [r4, #0]
 8003a04:	1d19      	adds	r1, r3, #4
 8003a06:	6029      	str	r1, [r5, #0]
 8003a08:	0601      	lsls	r1, r0, #24
 8003a0a:	d501      	bpl.n	8003a10 <_printf_i+0xec>
 8003a0c:	681e      	ldr	r6, [r3, #0]
 8003a0e:	e002      	b.n	8003a16 <_printf_i+0xf2>
 8003a10:	0646      	lsls	r6, r0, #25
 8003a12:	d5fb      	bpl.n	8003a0c <_printf_i+0xe8>
 8003a14:	881e      	ldrh	r6, [r3, #0]
 8003a16:	2f6f      	cmp	r7, #111	; 0x6f
 8003a18:	bf0c      	ite	eq
 8003a1a:	2308      	moveq	r3, #8
 8003a1c:	230a      	movne	r3, #10
 8003a1e:	4852      	ldr	r0, [pc, #328]	; (8003b68 <_printf_i+0x244>)
 8003a20:	2100      	movs	r1, #0
 8003a22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a26:	6865      	ldr	r5, [r4, #4]
 8003a28:	2d00      	cmp	r5, #0
 8003a2a:	bfa8      	it	ge
 8003a2c:	6821      	ldrge	r1, [r4, #0]
 8003a2e:	60a5      	str	r5, [r4, #8]
 8003a30:	bfa4      	itt	ge
 8003a32:	f021 0104 	bicge.w	r1, r1, #4
 8003a36:	6021      	strge	r1, [r4, #0]
 8003a38:	b90e      	cbnz	r6, 8003a3e <_printf_i+0x11a>
 8003a3a:	2d00      	cmp	r5, #0
 8003a3c:	d04d      	beq.n	8003ada <_printf_i+0x1b6>
 8003a3e:	4615      	mov	r5, r2
 8003a40:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a44:	fb03 6711 	mls	r7, r3, r1, r6
 8003a48:	5dc7      	ldrb	r7, [r0, r7]
 8003a4a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a4e:	4637      	mov	r7, r6
 8003a50:	42bb      	cmp	r3, r7
 8003a52:	460e      	mov	r6, r1
 8003a54:	d9f4      	bls.n	8003a40 <_printf_i+0x11c>
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d10b      	bne.n	8003a72 <_printf_i+0x14e>
 8003a5a:	6823      	ldr	r3, [r4, #0]
 8003a5c:	07de      	lsls	r6, r3, #31
 8003a5e:	d508      	bpl.n	8003a72 <_printf_i+0x14e>
 8003a60:	6923      	ldr	r3, [r4, #16]
 8003a62:	6861      	ldr	r1, [r4, #4]
 8003a64:	4299      	cmp	r1, r3
 8003a66:	bfde      	ittt	le
 8003a68:	2330      	movle	r3, #48	; 0x30
 8003a6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a72:	1b52      	subs	r2, r2, r5
 8003a74:	6122      	str	r2, [r4, #16]
 8003a76:	464b      	mov	r3, r9
 8003a78:	4621      	mov	r1, r4
 8003a7a:	4640      	mov	r0, r8
 8003a7c:	f8cd a000 	str.w	sl, [sp]
 8003a80:	aa03      	add	r2, sp, #12
 8003a82:	f7ff fedf 	bl	8003844 <_printf_common>
 8003a86:	3001      	adds	r0, #1
 8003a88:	d14c      	bne.n	8003b24 <_printf_i+0x200>
 8003a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a8e:	b004      	add	sp, #16
 8003a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a94:	4834      	ldr	r0, [pc, #208]	; (8003b68 <_printf_i+0x244>)
 8003a96:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003a9a:	6829      	ldr	r1, [r5, #0]
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003aa2:	6029      	str	r1, [r5, #0]
 8003aa4:	061d      	lsls	r5, r3, #24
 8003aa6:	d514      	bpl.n	8003ad2 <_printf_i+0x1ae>
 8003aa8:	07df      	lsls	r7, r3, #31
 8003aaa:	bf44      	itt	mi
 8003aac:	f043 0320 	orrmi.w	r3, r3, #32
 8003ab0:	6023      	strmi	r3, [r4, #0]
 8003ab2:	b91e      	cbnz	r6, 8003abc <_printf_i+0x198>
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	f023 0320 	bic.w	r3, r3, #32
 8003aba:	6023      	str	r3, [r4, #0]
 8003abc:	2310      	movs	r3, #16
 8003abe:	e7af      	b.n	8003a20 <_printf_i+0xfc>
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	f043 0320 	orr.w	r3, r3, #32
 8003ac6:	6023      	str	r3, [r4, #0]
 8003ac8:	2378      	movs	r3, #120	; 0x78
 8003aca:	4828      	ldr	r0, [pc, #160]	; (8003b6c <_printf_i+0x248>)
 8003acc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ad0:	e7e3      	b.n	8003a9a <_printf_i+0x176>
 8003ad2:	0659      	lsls	r1, r3, #25
 8003ad4:	bf48      	it	mi
 8003ad6:	b2b6      	uxthmi	r6, r6
 8003ad8:	e7e6      	b.n	8003aa8 <_printf_i+0x184>
 8003ada:	4615      	mov	r5, r2
 8003adc:	e7bb      	b.n	8003a56 <_printf_i+0x132>
 8003ade:	682b      	ldr	r3, [r5, #0]
 8003ae0:	6826      	ldr	r6, [r4, #0]
 8003ae2:	1d18      	adds	r0, r3, #4
 8003ae4:	6961      	ldr	r1, [r4, #20]
 8003ae6:	6028      	str	r0, [r5, #0]
 8003ae8:	0635      	lsls	r5, r6, #24
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	d501      	bpl.n	8003af2 <_printf_i+0x1ce>
 8003aee:	6019      	str	r1, [r3, #0]
 8003af0:	e002      	b.n	8003af8 <_printf_i+0x1d4>
 8003af2:	0670      	lsls	r0, r6, #25
 8003af4:	d5fb      	bpl.n	8003aee <_printf_i+0x1ca>
 8003af6:	8019      	strh	r1, [r3, #0]
 8003af8:	2300      	movs	r3, #0
 8003afa:	4615      	mov	r5, r2
 8003afc:	6123      	str	r3, [r4, #16]
 8003afe:	e7ba      	b.n	8003a76 <_printf_i+0x152>
 8003b00:	682b      	ldr	r3, [r5, #0]
 8003b02:	2100      	movs	r1, #0
 8003b04:	1d1a      	adds	r2, r3, #4
 8003b06:	602a      	str	r2, [r5, #0]
 8003b08:	681d      	ldr	r5, [r3, #0]
 8003b0a:	6862      	ldr	r2, [r4, #4]
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	f000 f82f 	bl	8003b70 <memchr>
 8003b12:	b108      	cbz	r0, 8003b18 <_printf_i+0x1f4>
 8003b14:	1b40      	subs	r0, r0, r5
 8003b16:	6060      	str	r0, [r4, #4]
 8003b18:	6863      	ldr	r3, [r4, #4]
 8003b1a:	6123      	str	r3, [r4, #16]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b22:	e7a8      	b.n	8003a76 <_printf_i+0x152>
 8003b24:	462a      	mov	r2, r5
 8003b26:	4649      	mov	r1, r9
 8003b28:	4640      	mov	r0, r8
 8003b2a:	6923      	ldr	r3, [r4, #16]
 8003b2c:	47d0      	blx	sl
 8003b2e:	3001      	adds	r0, #1
 8003b30:	d0ab      	beq.n	8003a8a <_printf_i+0x166>
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	079b      	lsls	r3, r3, #30
 8003b36:	d413      	bmi.n	8003b60 <_printf_i+0x23c>
 8003b38:	68e0      	ldr	r0, [r4, #12]
 8003b3a:	9b03      	ldr	r3, [sp, #12]
 8003b3c:	4298      	cmp	r0, r3
 8003b3e:	bfb8      	it	lt
 8003b40:	4618      	movlt	r0, r3
 8003b42:	e7a4      	b.n	8003a8e <_printf_i+0x16a>
 8003b44:	2301      	movs	r3, #1
 8003b46:	4632      	mov	r2, r6
 8003b48:	4649      	mov	r1, r9
 8003b4a:	4640      	mov	r0, r8
 8003b4c:	47d0      	blx	sl
 8003b4e:	3001      	adds	r0, #1
 8003b50:	d09b      	beq.n	8003a8a <_printf_i+0x166>
 8003b52:	3501      	adds	r5, #1
 8003b54:	68e3      	ldr	r3, [r4, #12]
 8003b56:	9903      	ldr	r1, [sp, #12]
 8003b58:	1a5b      	subs	r3, r3, r1
 8003b5a:	42ab      	cmp	r3, r5
 8003b5c:	dcf2      	bgt.n	8003b44 <_printf_i+0x220>
 8003b5e:	e7eb      	b.n	8003b38 <_printf_i+0x214>
 8003b60:	2500      	movs	r5, #0
 8003b62:	f104 0619 	add.w	r6, r4, #25
 8003b66:	e7f5      	b.n	8003b54 <_printf_i+0x230>
 8003b68:	08003e9b 	.word	0x08003e9b
 8003b6c:	08003eac 	.word	0x08003eac

08003b70 <memchr>:
 8003b70:	4603      	mov	r3, r0
 8003b72:	b510      	push	{r4, lr}
 8003b74:	b2c9      	uxtb	r1, r1
 8003b76:	4402      	add	r2, r0
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	d101      	bne.n	8003b82 <memchr+0x12>
 8003b7e:	2000      	movs	r0, #0
 8003b80:	e003      	b.n	8003b8a <memchr+0x1a>
 8003b82:	7804      	ldrb	r4, [r0, #0]
 8003b84:	3301      	adds	r3, #1
 8003b86:	428c      	cmp	r4, r1
 8003b88:	d1f6      	bne.n	8003b78 <memchr+0x8>
 8003b8a:	bd10      	pop	{r4, pc}

08003b8c <memcpy>:
 8003b8c:	440a      	add	r2, r1
 8003b8e:	4291      	cmp	r1, r2
 8003b90:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b94:	d100      	bne.n	8003b98 <memcpy+0xc>
 8003b96:	4770      	bx	lr
 8003b98:	b510      	push	{r4, lr}
 8003b9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b9e:	4291      	cmp	r1, r2
 8003ba0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ba4:	d1f9      	bne.n	8003b9a <memcpy+0xe>
 8003ba6:	bd10      	pop	{r4, pc}

08003ba8 <memmove>:
 8003ba8:	4288      	cmp	r0, r1
 8003baa:	b510      	push	{r4, lr}
 8003bac:	eb01 0402 	add.w	r4, r1, r2
 8003bb0:	d902      	bls.n	8003bb8 <memmove+0x10>
 8003bb2:	4284      	cmp	r4, r0
 8003bb4:	4623      	mov	r3, r4
 8003bb6:	d807      	bhi.n	8003bc8 <memmove+0x20>
 8003bb8:	1e43      	subs	r3, r0, #1
 8003bba:	42a1      	cmp	r1, r4
 8003bbc:	d008      	beq.n	8003bd0 <memmove+0x28>
 8003bbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bc6:	e7f8      	b.n	8003bba <memmove+0x12>
 8003bc8:	4601      	mov	r1, r0
 8003bca:	4402      	add	r2, r0
 8003bcc:	428a      	cmp	r2, r1
 8003bce:	d100      	bne.n	8003bd2 <memmove+0x2a>
 8003bd0:	bd10      	pop	{r4, pc}
 8003bd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003bda:	e7f7      	b.n	8003bcc <memmove+0x24>

08003bdc <_free_r>:
 8003bdc:	b538      	push	{r3, r4, r5, lr}
 8003bde:	4605      	mov	r5, r0
 8003be0:	2900      	cmp	r1, #0
 8003be2:	d040      	beq.n	8003c66 <_free_r+0x8a>
 8003be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003be8:	1f0c      	subs	r4, r1, #4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	bfb8      	it	lt
 8003bee:	18e4      	addlt	r4, r4, r3
 8003bf0:	f000 f910 	bl	8003e14 <__malloc_lock>
 8003bf4:	4a1c      	ldr	r2, [pc, #112]	; (8003c68 <_free_r+0x8c>)
 8003bf6:	6813      	ldr	r3, [r2, #0]
 8003bf8:	b933      	cbnz	r3, 8003c08 <_free_r+0x2c>
 8003bfa:	6063      	str	r3, [r4, #4]
 8003bfc:	6014      	str	r4, [r2, #0]
 8003bfe:	4628      	mov	r0, r5
 8003c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c04:	f000 b90c 	b.w	8003e20 <__malloc_unlock>
 8003c08:	42a3      	cmp	r3, r4
 8003c0a:	d908      	bls.n	8003c1e <_free_r+0x42>
 8003c0c:	6820      	ldr	r0, [r4, #0]
 8003c0e:	1821      	adds	r1, r4, r0
 8003c10:	428b      	cmp	r3, r1
 8003c12:	bf01      	itttt	eq
 8003c14:	6819      	ldreq	r1, [r3, #0]
 8003c16:	685b      	ldreq	r3, [r3, #4]
 8003c18:	1809      	addeq	r1, r1, r0
 8003c1a:	6021      	streq	r1, [r4, #0]
 8003c1c:	e7ed      	b.n	8003bfa <_free_r+0x1e>
 8003c1e:	461a      	mov	r2, r3
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	b10b      	cbz	r3, 8003c28 <_free_r+0x4c>
 8003c24:	42a3      	cmp	r3, r4
 8003c26:	d9fa      	bls.n	8003c1e <_free_r+0x42>
 8003c28:	6811      	ldr	r1, [r2, #0]
 8003c2a:	1850      	adds	r0, r2, r1
 8003c2c:	42a0      	cmp	r0, r4
 8003c2e:	d10b      	bne.n	8003c48 <_free_r+0x6c>
 8003c30:	6820      	ldr	r0, [r4, #0]
 8003c32:	4401      	add	r1, r0
 8003c34:	1850      	adds	r0, r2, r1
 8003c36:	4283      	cmp	r3, r0
 8003c38:	6011      	str	r1, [r2, #0]
 8003c3a:	d1e0      	bne.n	8003bfe <_free_r+0x22>
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	4401      	add	r1, r0
 8003c42:	6011      	str	r1, [r2, #0]
 8003c44:	6053      	str	r3, [r2, #4]
 8003c46:	e7da      	b.n	8003bfe <_free_r+0x22>
 8003c48:	d902      	bls.n	8003c50 <_free_r+0x74>
 8003c4a:	230c      	movs	r3, #12
 8003c4c:	602b      	str	r3, [r5, #0]
 8003c4e:	e7d6      	b.n	8003bfe <_free_r+0x22>
 8003c50:	6820      	ldr	r0, [r4, #0]
 8003c52:	1821      	adds	r1, r4, r0
 8003c54:	428b      	cmp	r3, r1
 8003c56:	bf01      	itttt	eq
 8003c58:	6819      	ldreq	r1, [r3, #0]
 8003c5a:	685b      	ldreq	r3, [r3, #4]
 8003c5c:	1809      	addeq	r1, r1, r0
 8003c5e:	6021      	streq	r1, [r4, #0]
 8003c60:	6063      	str	r3, [r4, #4]
 8003c62:	6054      	str	r4, [r2, #4]
 8003c64:	e7cb      	b.n	8003bfe <_free_r+0x22>
 8003c66:	bd38      	pop	{r3, r4, r5, pc}
 8003c68:	20000194 	.word	0x20000194

08003c6c <sbrk_aligned>:
 8003c6c:	b570      	push	{r4, r5, r6, lr}
 8003c6e:	4e0e      	ldr	r6, [pc, #56]	; (8003ca8 <sbrk_aligned+0x3c>)
 8003c70:	460c      	mov	r4, r1
 8003c72:	6831      	ldr	r1, [r6, #0]
 8003c74:	4605      	mov	r5, r0
 8003c76:	b911      	cbnz	r1, 8003c7e <sbrk_aligned+0x12>
 8003c78:	f000 f8bc 	bl	8003df4 <_sbrk_r>
 8003c7c:	6030      	str	r0, [r6, #0]
 8003c7e:	4621      	mov	r1, r4
 8003c80:	4628      	mov	r0, r5
 8003c82:	f000 f8b7 	bl	8003df4 <_sbrk_r>
 8003c86:	1c43      	adds	r3, r0, #1
 8003c88:	d00a      	beq.n	8003ca0 <sbrk_aligned+0x34>
 8003c8a:	1cc4      	adds	r4, r0, #3
 8003c8c:	f024 0403 	bic.w	r4, r4, #3
 8003c90:	42a0      	cmp	r0, r4
 8003c92:	d007      	beq.n	8003ca4 <sbrk_aligned+0x38>
 8003c94:	1a21      	subs	r1, r4, r0
 8003c96:	4628      	mov	r0, r5
 8003c98:	f000 f8ac 	bl	8003df4 <_sbrk_r>
 8003c9c:	3001      	adds	r0, #1
 8003c9e:	d101      	bne.n	8003ca4 <sbrk_aligned+0x38>
 8003ca0:	f04f 34ff 	mov.w	r4, #4294967295
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	bd70      	pop	{r4, r5, r6, pc}
 8003ca8:	20000198 	.word	0x20000198

08003cac <_malloc_r>:
 8003cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cb0:	1ccd      	adds	r5, r1, #3
 8003cb2:	f025 0503 	bic.w	r5, r5, #3
 8003cb6:	3508      	adds	r5, #8
 8003cb8:	2d0c      	cmp	r5, #12
 8003cba:	bf38      	it	cc
 8003cbc:	250c      	movcc	r5, #12
 8003cbe:	2d00      	cmp	r5, #0
 8003cc0:	4607      	mov	r7, r0
 8003cc2:	db01      	blt.n	8003cc8 <_malloc_r+0x1c>
 8003cc4:	42a9      	cmp	r1, r5
 8003cc6:	d905      	bls.n	8003cd4 <_malloc_r+0x28>
 8003cc8:	230c      	movs	r3, #12
 8003cca:	2600      	movs	r6, #0
 8003ccc:	603b      	str	r3, [r7, #0]
 8003cce:	4630      	mov	r0, r6
 8003cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cd4:	4e2e      	ldr	r6, [pc, #184]	; (8003d90 <_malloc_r+0xe4>)
 8003cd6:	f000 f89d 	bl	8003e14 <__malloc_lock>
 8003cda:	6833      	ldr	r3, [r6, #0]
 8003cdc:	461c      	mov	r4, r3
 8003cde:	bb34      	cbnz	r4, 8003d2e <_malloc_r+0x82>
 8003ce0:	4629      	mov	r1, r5
 8003ce2:	4638      	mov	r0, r7
 8003ce4:	f7ff ffc2 	bl	8003c6c <sbrk_aligned>
 8003ce8:	1c43      	adds	r3, r0, #1
 8003cea:	4604      	mov	r4, r0
 8003cec:	d14d      	bne.n	8003d8a <_malloc_r+0xde>
 8003cee:	6834      	ldr	r4, [r6, #0]
 8003cf0:	4626      	mov	r6, r4
 8003cf2:	2e00      	cmp	r6, #0
 8003cf4:	d140      	bne.n	8003d78 <_malloc_r+0xcc>
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	4631      	mov	r1, r6
 8003cfa:	4638      	mov	r0, r7
 8003cfc:	eb04 0803 	add.w	r8, r4, r3
 8003d00:	f000 f878 	bl	8003df4 <_sbrk_r>
 8003d04:	4580      	cmp	r8, r0
 8003d06:	d13a      	bne.n	8003d7e <_malloc_r+0xd2>
 8003d08:	6821      	ldr	r1, [r4, #0]
 8003d0a:	3503      	adds	r5, #3
 8003d0c:	1a6d      	subs	r5, r5, r1
 8003d0e:	f025 0503 	bic.w	r5, r5, #3
 8003d12:	3508      	adds	r5, #8
 8003d14:	2d0c      	cmp	r5, #12
 8003d16:	bf38      	it	cc
 8003d18:	250c      	movcc	r5, #12
 8003d1a:	4638      	mov	r0, r7
 8003d1c:	4629      	mov	r1, r5
 8003d1e:	f7ff ffa5 	bl	8003c6c <sbrk_aligned>
 8003d22:	3001      	adds	r0, #1
 8003d24:	d02b      	beq.n	8003d7e <_malloc_r+0xd2>
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	442b      	add	r3, r5
 8003d2a:	6023      	str	r3, [r4, #0]
 8003d2c:	e00e      	b.n	8003d4c <_malloc_r+0xa0>
 8003d2e:	6822      	ldr	r2, [r4, #0]
 8003d30:	1b52      	subs	r2, r2, r5
 8003d32:	d41e      	bmi.n	8003d72 <_malloc_r+0xc6>
 8003d34:	2a0b      	cmp	r2, #11
 8003d36:	d916      	bls.n	8003d66 <_malloc_r+0xba>
 8003d38:	1961      	adds	r1, r4, r5
 8003d3a:	42a3      	cmp	r3, r4
 8003d3c:	6025      	str	r5, [r4, #0]
 8003d3e:	bf18      	it	ne
 8003d40:	6059      	strne	r1, [r3, #4]
 8003d42:	6863      	ldr	r3, [r4, #4]
 8003d44:	bf08      	it	eq
 8003d46:	6031      	streq	r1, [r6, #0]
 8003d48:	5162      	str	r2, [r4, r5]
 8003d4a:	604b      	str	r3, [r1, #4]
 8003d4c:	4638      	mov	r0, r7
 8003d4e:	f104 060b 	add.w	r6, r4, #11
 8003d52:	f000 f865 	bl	8003e20 <__malloc_unlock>
 8003d56:	f026 0607 	bic.w	r6, r6, #7
 8003d5a:	1d23      	adds	r3, r4, #4
 8003d5c:	1af2      	subs	r2, r6, r3
 8003d5e:	d0b6      	beq.n	8003cce <_malloc_r+0x22>
 8003d60:	1b9b      	subs	r3, r3, r6
 8003d62:	50a3      	str	r3, [r4, r2]
 8003d64:	e7b3      	b.n	8003cce <_malloc_r+0x22>
 8003d66:	6862      	ldr	r2, [r4, #4]
 8003d68:	42a3      	cmp	r3, r4
 8003d6a:	bf0c      	ite	eq
 8003d6c:	6032      	streq	r2, [r6, #0]
 8003d6e:	605a      	strne	r2, [r3, #4]
 8003d70:	e7ec      	b.n	8003d4c <_malloc_r+0xa0>
 8003d72:	4623      	mov	r3, r4
 8003d74:	6864      	ldr	r4, [r4, #4]
 8003d76:	e7b2      	b.n	8003cde <_malloc_r+0x32>
 8003d78:	4634      	mov	r4, r6
 8003d7a:	6876      	ldr	r6, [r6, #4]
 8003d7c:	e7b9      	b.n	8003cf2 <_malloc_r+0x46>
 8003d7e:	230c      	movs	r3, #12
 8003d80:	4638      	mov	r0, r7
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	f000 f84c 	bl	8003e20 <__malloc_unlock>
 8003d88:	e7a1      	b.n	8003cce <_malloc_r+0x22>
 8003d8a:	6025      	str	r5, [r4, #0]
 8003d8c:	e7de      	b.n	8003d4c <_malloc_r+0xa0>
 8003d8e:	bf00      	nop
 8003d90:	20000194 	.word	0x20000194

08003d94 <_realloc_r>:
 8003d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d98:	4680      	mov	r8, r0
 8003d9a:	4614      	mov	r4, r2
 8003d9c:	460e      	mov	r6, r1
 8003d9e:	b921      	cbnz	r1, 8003daa <_realloc_r+0x16>
 8003da0:	4611      	mov	r1, r2
 8003da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003da6:	f7ff bf81 	b.w	8003cac <_malloc_r>
 8003daa:	b92a      	cbnz	r2, 8003db8 <_realloc_r+0x24>
 8003dac:	f7ff ff16 	bl	8003bdc <_free_r>
 8003db0:	4625      	mov	r5, r4
 8003db2:	4628      	mov	r0, r5
 8003db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003db8:	f000 f838 	bl	8003e2c <_malloc_usable_size_r>
 8003dbc:	4284      	cmp	r4, r0
 8003dbe:	4607      	mov	r7, r0
 8003dc0:	d802      	bhi.n	8003dc8 <_realloc_r+0x34>
 8003dc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003dc6:	d812      	bhi.n	8003dee <_realloc_r+0x5a>
 8003dc8:	4621      	mov	r1, r4
 8003dca:	4640      	mov	r0, r8
 8003dcc:	f7ff ff6e 	bl	8003cac <_malloc_r>
 8003dd0:	4605      	mov	r5, r0
 8003dd2:	2800      	cmp	r0, #0
 8003dd4:	d0ed      	beq.n	8003db2 <_realloc_r+0x1e>
 8003dd6:	42bc      	cmp	r4, r7
 8003dd8:	4622      	mov	r2, r4
 8003dda:	4631      	mov	r1, r6
 8003ddc:	bf28      	it	cs
 8003dde:	463a      	movcs	r2, r7
 8003de0:	f7ff fed4 	bl	8003b8c <memcpy>
 8003de4:	4631      	mov	r1, r6
 8003de6:	4640      	mov	r0, r8
 8003de8:	f7ff fef8 	bl	8003bdc <_free_r>
 8003dec:	e7e1      	b.n	8003db2 <_realloc_r+0x1e>
 8003dee:	4635      	mov	r5, r6
 8003df0:	e7df      	b.n	8003db2 <_realloc_r+0x1e>
	...

08003df4 <_sbrk_r>:
 8003df4:	b538      	push	{r3, r4, r5, lr}
 8003df6:	2300      	movs	r3, #0
 8003df8:	4d05      	ldr	r5, [pc, #20]	; (8003e10 <_sbrk_r+0x1c>)
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	602b      	str	r3, [r5, #0]
 8003e00:	f7fc ff96 	bl	8000d30 <_sbrk>
 8003e04:	1c43      	adds	r3, r0, #1
 8003e06:	d102      	bne.n	8003e0e <_sbrk_r+0x1a>
 8003e08:	682b      	ldr	r3, [r5, #0]
 8003e0a:	b103      	cbz	r3, 8003e0e <_sbrk_r+0x1a>
 8003e0c:	6023      	str	r3, [r4, #0]
 8003e0e:	bd38      	pop	{r3, r4, r5, pc}
 8003e10:	2000019c 	.word	0x2000019c

08003e14 <__malloc_lock>:
 8003e14:	4801      	ldr	r0, [pc, #4]	; (8003e1c <__malloc_lock+0x8>)
 8003e16:	f000 b811 	b.w	8003e3c <__retarget_lock_acquire_recursive>
 8003e1a:	bf00      	nop
 8003e1c:	200001a0 	.word	0x200001a0

08003e20 <__malloc_unlock>:
 8003e20:	4801      	ldr	r0, [pc, #4]	; (8003e28 <__malloc_unlock+0x8>)
 8003e22:	f000 b80c 	b.w	8003e3e <__retarget_lock_release_recursive>
 8003e26:	bf00      	nop
 8003e28:	200001a0 	.word	0x200001a0

08003e2c <_malloc_usable_size_r>:
 8003e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e30:	1f18      	subs	r0, r3, #4
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	bfbc      	itt	lt
 8003e36:	580b      	ldrlt	r3, [r1, r0]
 8003e38:	18c0      	addlt	r0, r0, r3
 8003e3a:	4770      	bx	lr

08003e3c <__retarget_lock_acquire_recursive>:
 8003e3c:	4770      	bx	lr

08003e3e <__retarget_lock_release_recursive>:
 8003e3e:	4770      	bx	lr

08003e40 <_init>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	bf00      	nop
 8003e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e46:	bc08      	pop	{r3}
 8003e48:	469e      	mov	lr, r3
 8003e4a:	4770      	bx	lr

08003e4c <_fini>:
 8003e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4e:	bf00      	nop
 8003e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e52:	bc08      	pop	{r3}
 8003e54:	469e      	mov	lr, r3
 8003e56:	4770      	bx	lr
